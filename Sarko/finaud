#!/usr/bin/perl
# $Id$
# This program aims to change node state automatically when they are inaccesible or they become alive

use oar_iolib;
use oar_Judas qw(oar_debug oar_warn oar_error);
use ping_checker qw(test_hosts);
use Data::Dumper;
use strict;
use IO::Socket::INET;

oar_debug("[finaud] Finaud started\n");

oar_debug("[finaud] Check Alive and Suspected nodes\n");
my $base = iolib::connect();

my $Occupied_resources_vector;
for my $r (iolib::get_current_assigned_resources($base)){
    vec($Occupied_resources_vector,$r,1) = 1;
}

my @Resource_list;
my @resource_list_tmp;
push(@resource_list_tmp, iolib::get_default_type_resources_in_state($base,"Alive"));
push(@resource_list_tmp, iolib::get_default_type_resources_in_state($base,"Suspected"));

my %Node_list;
foreach my $i (@resource_list_tmp){
    #Do not check occupied resources
    if ((!vec($Occupied_resources_vector, $i->{resource_id}, 1)) and ($i ne "")){
        # Do not check Suspected resources not changed be me (finaud)
        if (($i->{state} ne "Suspected") or ($i->{finaud_decision} eq "YES")){
            push(@{$Node_list{$i->{network_address}}}, $i->{resource_id});
            push(@Resource_list,$i);
        }
    }
}

my @Nodes_to_check = keys(%Node_list);
oar_debug("[finaud] Testing resource(s) on : @Nodes_to_check\n");

# Call the right program to test each nodes
my %bad_node_hash;
foreach my $i (test_hosts(@Nodes_to_check)){
    $bad_node_hash{$i} = 0;
}

#Make the decisions
my $return_value = 0;
foreach my $i (@Resource_list){
    if (defined($bad_node_hash{$i->{network_address}}) and ($i->{state} eq "Alive")){
        iolib::set_resource_nextState($base,$i->{resource_id},"Suspected");
        iolib::update_resource_nextFinaudDecision($base,$i->{resource_id},"YES");
        $return_value = 1;
        oar_debug("[finaud] Set the next state of $i->{resource_id}, $i->{network_address} to Suspected\n");
    }elsif (!defined($bad_node_hash{$i->{network_address}}) and ($i->{state} eq "Suspected")){
        iolib::set_resource_nextState($base,$i->{resource_id},"Alive");
        iolib::update_resource_nextFinaudDecision($base,$i->{resource_id},"YES");
        $return_value = 1;
        oar_debug("[finaud] Set the next state of $i->{resource_id}, $i->{network_address} to Alive\n");
    }
}

iolib::disconnect($base);

oar_debug("[finaud] Finaud ended : $return_value\n");

exit($return_value);
