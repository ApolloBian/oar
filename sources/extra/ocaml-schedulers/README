
OAR's scheduler in ocaml
========================

Intro
-----
The main goal of this scheduler is to provide a better scalabily in comparaison to the schedulers in Perl.Up to now some features are missing see below.

This developement of this scheduler borrows lot of ideas and source codes from perl oar_2.x schedulers and (a large part of) moldable ocaml oar_1.6 scheduler (thanks respectively to Nicolas Capit and Lionel Eyraud for theirs codes). 

Features:
---------
 * conservative backfilling
 * resources properties matching
 * besteffort
 * hierarchies
 * multiple resource type [TO TEST]
 * multiple resource requests ( + ) [TO TEST]
 * time constant guards, [TO TEST]
 * suspend/resume, 
 * job depencies [TO TEST]
 * job container  
 * fairesharing [TO TEST]
 * order_by on resources [TO FINISH / EVALUATE]

Missing:
--------
 * Timesharing (not planned for fisrt public version)
 * Placeholder (not planned)
 * Best / All resource expression in submission requests
 * Extensive test (no yet running on production cluster)
 * SCHEDULER_TOKEN_SCRIPTS support (for legacy licence management)
 * SCHEDULER_AVAILABLE_SUSPENDED_RESOURCE_TYPE (get_scheduled_jobs function is ready)

Next:
-----

 * unit test
 * better compilation process (for unit tests)
 * add memoizing for resource filtering by job
 * simple performance optimisation (threshold on percent of idle ressource at now and number of scheduled jobs)
 * BEST  -2 means BEST (Alive resources at the time) 
 * ALL   -1 means ALL (Alive + Absent + Suspected resources)
 * scheduler message (see perl version )
 * job_error / job_message / scheduler message
 * need to test multi-resource-type (since >= cbf_mb_h)
 * need to test multi-request with non exclusive resource selection (since >= cbf_mb_h)
 * Scalability performance testing
 * add always SCHEDULER_RESOURCES_ALWAYS_ASSIGNED_TYPE (is it really needed ?)
 * errors logging (at least same error support as provide in perl scheduler)
 * Do we need global scheduling timeout ??? (at timeout expiration we can save succesfully scheduled job, can also be the way for incremental assignement saving...)
 * dump first k ready launchable jobs (for performance /reactivity issue)
 * nb_asked_resource = 0 raise an error (>= cbf_mb_h) 
 * time_end_slot(n-1) = time_start_slot(n) for same resource must be time_start_slot(n) = time_end_slot(n-1) + 1 ! rajouter + 1 au walltime des jobs + une garde temporelle ?!! (can be address by the use of security_time_overhead ?) 


ToDo:
-----
  * [IP] ORDER_BY
    get_conf HIERARCHY_LABELS
    get_conf ORDER_BY
    use of order_by_idx in save assignements 
    Test/Debug
    
    [D] generate hierarchy_level from  get_resource_list_w_hierarchy
    [D] use find_resource_hierarchies_scattered
    [D] add ord2init_ids, init2ord_ids in get_resource_list_w_hierarchy
    [D] get_resource_list_w_hierarchy 
    [D] use init2ord_ids for prev scheduled jobs 


  * switch name to kamelot
  * performance evaluation 
  * test fairsharing
  * test_unit: better compilation process
  * Ounit (cf archive)
    * test sub_intevals
  * BEST  -2 means BEST (Alive resources at the time)
  * ALL   -1 means ALL (Alive + Absent + Suspected resources)
  * caching SQL queries (by example resource properties query per job) / memoizing

Misc:
-----

  * With 64 bits machine we can use ocaml's int with 63 bits instead of Int64.
  * memoizing (see Helpers)/caching SQL queries (by example resource properties query per job)

Done:
-----
 * container
 * Support of postgresql
 * Preliminary performance comparaison (perl version timesharing only scheduler from oar-server_2.3.4-1_all.deb against cbf_mh_h). Perl scheduler doesn't seem to scale with number of resources)
 * modify itv_intersect in Interval / remove itv2str, itvs2str (>= cbf_mh_h)
 * multi-resource-type (since >= cbf_mh_h) (
 * multi-request with non exclusive resource selection (since >= cbf_mh_h)

Remarks and misc:
-----------------
 * http://martin.jambon.free.fr/ocaml.htm 

Bugs:
-----
 * besteffort

Debug:
------
  make bc
  ocamlmktop -I /usr/lib/ocaml/  -o yop str.cma unix.cma ../common/helpers.cmo ../common/interval.cmo ../common/conf.cmo types.cmo ../common/hierarchy.cmo ./simple_cbf_mb_h_ct.cmo

ocamlmktop -I /usr/lib/ocaml/  -o yop str.cma unix.cma ../common/helpers.cmo \
            ../common/interval.cmo ../common/conf.cmo types.cmo ../common/hierarchy.cmo \
            ./simple_cbf_mb_h_ct.cmo mysql/mysql.cma ./mysql_driver.cmo iolib.cmo ./simple_cbf_mb_h_ct_oar.cmo

ocamlmktop -I /usr/lib/ocaml/  -o yop str.cma unix.cma ../common/helpers.cmo \
            ../common/interval.cmo ../common/conf.cmo types.cmo ../common/hierarchy.cmo \
            ./simple_cbf_mb_h_ct.cmo mysql/mysql.cma ./mysql_driver.cmo iolib.cmo 

rlwrap ./yop -I ../common -I .

Tests:
------

Order_by support
~~~~~~~~~~~~~~~~~
* notes: [IP] In Progress, [D] Done, see test_scatter_hierarchie.ml

* order_by imply list of intervals by block of same kind of ressources for each level of hierarchy.
* [IP]iolib: get_resource_list_w_hierarchy (hy_labels: string list) scheduler_resource_order  in place of get_resource_list 
*  
* [TD]recuperation des [hy_labels: string list] dans HIERARCHY_LABEL??? dans simple_oar.ml
*                 SCHEDULER_RESOURCE_ORDER dans simple_oar.ml
* [D] find_resource_hierarchies_scattered see (hierarchy.ml) 


* [TD] all integration

