#!/usr/bin/perl -w
# $Id$
#
# This script aims at managing the node properties (list, add, delete).
# To set the properties values, use oarnodesettings.
#
# To use the quiet mode, just do something like:
#   echo -e "mysqlroot\nmysqlpassword\n" | oar_property.pl -q -l

use strict;
use warnings;
use OAR::IO;
use OAR::Conf qw(init_conf get_conf is_conf);
use Getopt::Long;
use OAR::Version;
use OAR::Tools;

my $Old_umask = sprintf("%lo",umask());
umask(oct("022"));

# The functions are appended at the end of this file
sub print_usage();
sub check_property_name($);

Getopt::Long::Configure("gnu_getopt");

my ($Help,  $List_properties, $Show_types, $Quiet, $Varchar);
my @Add_property;
my @Delete_property;
my @Rename_property;
my $Version;
GetOptions( "help|h"   => \$Help,
            "add|a=s"    => \@Add_property,
            "delete|d=s" => \@Delete_property,
            "rename|r=s" => \@Rename_property,
            "list|l"   => \$List_properties,
            "type|t"   => \$Show_types,
            "quiet|q"  => \$Quiet,
            "varchar|c"  => \$Varchar,
            "version|V" => \$Version
          ) or exit(1);

if (defined($Version)){
    print("OAR version: ".OAR::Version::get_version()."\n");
    exit(0);
}

if ($Help || (($#Add_property < 0) and ($#Delete_property < 0)  and ($#Rename_property < 0)  and (! defined($List_properties)))) {
    print_usage();
    exit(1);
}

my $base = OAR::IO::connect();

my $query;

my %properties = OAR::IO::list_resource_properties_fields($base);

if (defined($List_properties)) {
    foreach my $p (keys(%properties)){
        unless  (OAR::Tools::check_resource_property($p) == 1){
            if (defined($Show_types)) {
                print("$p ($properties{$p})\n");
            } else {
                print("$p\n");
            }
        }
    }
}

foreach my $r (@Delete_property){
    check_property_name($r);
    if (not exists($properties{$r})) {
        print("Propoery $r does not exist\n");
        next;
    }

    $base->do("ALTER TABLE resources DROP COLUMN $r")
        or die("DB error: " . $base->errstr."\n");

    if (! $Quiet) {
        print("Removed property: $r\n");
    }
}

foreach my $a (@Add_property){
    check_property_name($a);
    if (exists($properties{$a})) {
        if (defined($Varchar) and $properties{$a} ne "varchar") {
            die("Error: property $a already exists but with type mismatch");
        } else {
            print("Property $a already exists\n");
            next;
        }
    }
    my $req;
    if (defined($Varchar)){
        $req = "ALTER TABLE resources ADD COLUMN $a VARCHAR(255)";
    }else{
        $req = "ALTER TABLE resources ADD COLUMN $a INT";
    }
    $base->do($req)
        or die("DB error: " . $base->errstr."\n");

    if (! $Quiet) {
        print("Added property: $a\n");
    }
}

foreach my $p (@Rename_property){
    if (my ($old_prop,$new_prop) = $p =~ m/^\s*([a-z0-9_]+)\s*,\s*([a-z0-9_]+)\s*$/m){
        check_property_name($old_prop);
        check_property_name($new_prop);
        if (not exists($properties{$old_prop})) {
            print("Propoery $old_prop does not exist\n");
            next;
        }
        if (exists($properties{$new_prop})) {
            print("Propoery $new_prop already exists\n");
            next;
        }
        $base->do(" ALTER TABLE resources RENAME $old_prop TO $new_prop")
            or die("DB error: " . $base->errstr."\n");

        $base->do(" UPDATE resource_logs
                    SET attribute = \'$new_prop\'
                    WHERE
                        attribute = \'$old_prop\'")
            or die("DB error: " . $base->errstr."\n");

        $base->do(" UPDATE job_resource_descriptions
                    SET res_job_resource_type = \'$new_prop\'
                    WHERE
                        res_job_resource_type = \'$old_prop\'")
            or die("DB error: " . $base->errstr."\n");

        if (! $Quiet) {
            print("Renamed property $old_prop to $new_prop\n");
        }
    } else {
        print_usage();
        exit(1);
    }
}

OAR::IO::disconnect($base);
	
exit(0);


#############################################################################
# FUNCTIONS
#
#Display usage
sub print_usage() {
    my ($cmd) = $0 =~ /([^\/]+)$/;
    print <<EOS;
Usage: 
    $cmd <options>

Manage OAR resource properties.

Options:
    --list|-l             list the properties
      --type|-t           show the types of the properties
    --add|-a NAME         add a property (interger)
      --varchar|-c        property is a character string
    --delete|-d NAME      delete a property
    --rename|-r OLD,NEW   rename a property from OLD to NEW name
    --quiet|-q            quiet mode (no extra output)
    --help|-h             show this help screen
    --version|-V          show OAR version

EOS
}

# Check that the given parameter is a valid column name to avoid issues within
# MySQL
sub check_property_name($) {
    my $propertyname = shift;
    if (not $propertyname =~ /^[a-z0-9_]+$/) {
        die("Error: '$propertyname' is not a valid property name");
    }
    if (OAR::Tools::check_resource_property($propertyname) == 1){
        warn("Error: '$propertyname' is a OAR system property and may not be altered\n");
        exit(1);
    }
}
#############################################################################

