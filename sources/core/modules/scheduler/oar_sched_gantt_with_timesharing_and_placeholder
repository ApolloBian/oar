#!/usr/bin/perl
# $Id$
#-d:DProf

use strict;
use DBI();
use OAR::IO;
use Data::Dumper;
use OAR::Modules::Judas qw(oar_debug oar_warn oar_error set_current_log_category);
use OAR::Conf qw(init_conf dump_conf get_conf is_conf get_conf_with_default_param);
use OAR::Schedulers::GanttHoleStorage;
use Storable qw(dclone);
use Time::HiRes qw(gettimeofday);

# Log category
set_current_log_category('scheduler');
my $scheduler_name = "oar_sched_gantt_with_timesharing_and_placeholder";

init_conf($ENV{OARCONFFILE});
my $initial_time = time();
my $timeout = 10;
my $Minimum_timeout_per_job = 0;
if (is_conf("SCHEDULER_TIMEOUT")){
    $timeout = get_conf("SCHEDULER_TIMEOUT");
}

# Constant duration time of a besteffort job
my $besteffort_duration = 5*60;

my $max_waiting_jobs_to_schedule = 1000;

# $security_time_overhead is the security time (second) used to be sure there
# are no problem with overlaping jobs
my $security_time_overhead = 60;
if (is_conf("SCHEDULER_JOB_SECURITY_TIME")){
    $security_time_overhead = get_conf("SCHEDULER_JOB_SECURITY_TIME");
}

my $minimum_hole_time = 0;
if (is_conf("SCHEDULER_GANTT_HOLE_MINIMUM_TIME")){
    $minimum_hole_time = get_conf("SCHEDULER_GANTT_HOLE_MINIMUM_TIME");
}

my $Order_part = get_conf("SCHEDULER_RESOURCE_ORDER");

my @Sched_available_suspended_resource_type;
my $sched_available_suspended_resource_type_tmp = get_conf("SCHEDULER_AVAILABLE_SUSPENDED_RESOURCE_TYPE");
if (!defined($sched_available_suspended_resource_type_tmp)){
    push(@Sched_available_suspended_resource_type, "default");
}else{
    @Sched_available_suspended_resource_type = split(" ",$sched_available_suspended_resource_type_tmp);
}

# Look at resources that we must add for each job
my $Resources_to_always_add_type = get_conf("SCHEDULER_RESOURCES_ALWAYS_ASSIGNED_TYPE");
my @Resources_to_always_add = ();

my $Max_nb_processes = get_conf_with_default_param("SCHEDULER_NB_PROCESSES",1);

my $current_time ;

my $queue;
if (defined($ARGV[0]) && defined($ARGV[1]) && $ARGV[1] =~ m/\d+/m) {
    $queue = $ARGV[0];
    $current_time = $ARGV[1];
}else{
    oar_error("[$scheduler_name] No queue specified on command line\n");
    exit(1);
}

# Init
my $base = OAR::IO::connect();
my $base_ro = OAR::IO::connect_ro();

oar_debug("[$scheduler_name] Starting scheduler for queue $queue at time $current_time\n");

# First check states of resources that we must add for every job
if (defined($Resources_to_always_add_type)){
    my $tmp_result_state_resources = OAR::IO::get_specific_resource_states($base,$Resources_to_always_add_type);
    if ($#{$tmp_result_state_resources->{"Suspected"}} >= 0){
        oar_warn("[$scheduler_name] Some of the resources matching the SCHEDULER_RESOURCES_ALWAYS_ASSIGNED_TYPE configuration directive are Suspected. No job can be scheduled. Exiting\n");
        exit(1);
    }else{
        if (defined($tmp_result_state_resources->{"Alive"})){
            @Resources_to_always_add = @{$tmp_result_state_resources->{"Alive"}};
            oar_debug("[$scheduler_name] The following Alive resources matching the SCHEDULER_RESOURCES_ALWAYS_ASSIGNED_TYPE configuration directive will be added to every job: @Resources_to_always_add\n");
        }
    }
}


my $timesharing_gantts;
# Create the Gantt Diagrams
#Init the gantt chart with all resources
my $All_resource_list_vec = '';
my $max_resources = 1;
foreach my $r (OAR::IO::list_resources($base)){
    vec($All_resource_list_vec,$r->{resource_id},1) = 1;
    $max_resources = $r->{resource_id} if ($r->{resource_id} > $max_resources);
}

my $Gantt = {};
$Gantt->{0}->{""}->{""}->{""} = OAR::Schedulers::GanttHoleStorage::new($max_resources, $minimum_hole_time);
OAR::Schedulers::GanttHoleStorage::add_new_resources($Gantt->{0}->{""}->{""}->{""}, $All_resource_list_vec);

sub parse_timesharing($$$){
    my $str = shift;
    my $job_user = shift;
    my $job_name = shift;
            
    my $user = "*";
    my $name = "*";
    foreach my $s (split(',', $str)){
        if ($s =~ m/^\s*([\w\*]+)\s*$/m){
            if ($1 eq "user"){
                $user = $job_user;
            }elsif (($1 eq "name") and ($job_name ne "")){
                $name = $job_name;
            }
        }
    }

    return($user,$name);
}

oar_debug("[$scheduler_name] Begin phase 1 (running jobs)\n");
# Take care of currently scheduled jobs (gantt in the database)
my ($order,%already_scheduled_jobs) = OAR::IO::get_gantt_scheduled_jobs($base);
foreach my $i (@{$order}){
    my $container_id = 0;
    my $inner_id = 0;
    my $set_placeholder_name = "";
    my $use_placeholder_name = "";
    my $timesharing_user = "";
    my $timesharing_name = "";
    my $types = OAR::IO::get_current_job_types($base,$i);
    # Ignore besteffort jobs
    if ((! defined($types->{besteffort})) or ($queue eq "besteffort")){
        my @resource_list = @{$already_scheduled_jobs{$i}->[3]};
        my $job_duration = $already_scheduled_jobs{$i}->[1];
        if ($already_scheduled_jobs{$i}->[4] eq "Suspended"){
            # Remove resources of the type specified in SCHEDULER_AVAILABLE_SUSPENDED_RESOURCE_TYPE
            @resource_list = OAR::IO::get_job_current_resources($base, $already_scheduled_jobs{$i}->[7],\@Sched_available_suspended_resource_type);
            next if ($#resource_list < 0);
        }
        if ($already_scheduled_jobs{$i}->[8] eq "YES"){
            # This job was suspended so we must recalculate the walltime
            $job_duration += OAR::IO::get_job_suspended_sum_duration($base,$i,$current_time);
        }

        my $vec = '';
        foreach my $r (@resource_list){
            vec($vec,$r,1) = 1;
        }

        if (defined($types->{inner}) and ($types->{inner} =~ /^(\d+)$/)){
            $inner_id = $1;
            if (defined($Gantt->{$inner_id}->{""}->{""}->{""})){
                oar_debug("[$scheduler_name] [$i] inner job: using container $inner_id\n");
            }else{
                oar_debug("[$scheduler_name] [$i] inner job: container $inner_id does not exist but job is running, use container 0.\n");
                $inner_id = 0;
            }
        }
        if (defined($types->{container})){ # A container job cannot be set_placeholder or use_placeholder or timesharing. 
            oar_debug("[$scheduler_name] [$i] job is ($inner_id,,,)\n");
            $container_id = $i;
            oar_debug("[$scheduler_name] [$i] container job: create gantt ($container_id,,,)\n");
            $Gantt->{$container_id}->{""}->{""}->{""} = OAR::Schedulers::GanttHoleStorage::new_with_1_hole($max_resources, $minimum_hole_time, $already_scheduled_jobs{$i}->[0], $job_duration + $security_time_overhead, $vec, $All_resource_list_vec);
        } elsif (defined($types->{set_placeholder})){ # A set_placeholder job cannot be use_placeholder or timesharing. 
            $set_placeholder_name = $types->{set_placeholder};
            oar_debug("[$scheduler_name] [$i] job is ($inner_id,s:$set_placeholder_name,,)\n");
            if (not defined($Gantt->{$inner_id}->{$set_placeholder_name}->{""}->{""})){
                $Gantt->{$inner_id}->{$set_placeholder_name}->{""}->{""} = dclone($Gantt->{$inner_id}->{""}->{""}->{""});
                oar_debug("[$scheduler_name] [$i] set_placeholder job: cloned gantt ($inner_id,$set_placeholder_name,,) from ($inner_id,,,)\n");
            }
        } else {
            if (defined($types->{use_placeholder})){
                $use_placeholder_name = $types->{use_placeholder};
            }
            if (defined($types->{timesharing})){
                ($timesharing_user, $timesharing_name) = parse_timesharing($types->{timesharing}, $already_scheduled_jobs{$i}->[5], $already_scheduled_jobs{$i}->[6]);
            }
            oar_debug("[$scheduler_name] [$i] job is ($inner_id,u:$use_placeholder_name,$timesharing_user,$timesharing_name)\n");
            if (not defined($Gantt->{$inner_id}->{$use_placeholder_name}->{$timesharing_user}->{$timesharing_name})) {
                if (not defined($Gantt->{$inner_id}->{$use_placeholder_name}->{""}->{""}) and not defined($Gantt->{$inner_id}->{""}->{$timesharing_user}->{$timesharing_name})) {
                    $Gantt->{$inner_id}->{$use_placeholder_name}->{$timesharing_user}->{$timesharing_name} = dclone($Gantt->{$inner_id}->{""}->{""}->{""});
                    oar_debug("[$scheduler_name] [$i] use_placeholder/timesharing job: cloned gantt ($inner_id,$use_placeholder_name,$timesharing_user,$timesharing_name) from ($inner_id,,,)\n");
                    if ($use_placeholder_name ne "") {
                        $Gantt->{$inner_id}->{$use_placeholder_name}->{""}->{""} = dclone($Gantt->{$inner_id}->{""}->{""}->{""});
                        oar_debug("[$scheduler_name] [$i] use_placeholder/timesharing job: cloned gantt ($inner_id,$use_placeholder_name,,) from ($inner_id,,,)\n");
                    }
                    if ($timesharing_user ne "" or $timesharing_name ne "") {
                        $Gantt->{$inner_id}->{""}->{$timesharing_user}->{$timesharing_user} = dclone($Gantt->{$inner_id}->{""}->{""}->{""});
                        oar_debug("[$scheduler_name] [$i] use_placeholder/timesharing job: cloned gantt ($inner_id,,$timesharing_user,$timesharing_name) from ($inner_id,,,)\n");
                    }
                } elsif (not defined($Gantt->{$inner_id}->{$use_placeholder_name}->{""}->{""})) { #G($i,,$u,$n) is defined
                    $Gantt->{$inner_id}->{$use_placeholder_name}->{""}->{""} = dclone($Gantt->{$inner_id}->{""}->{""}->{""});
                    oar_debug("[$scheduler_name] [$i] use_placeholder/timesharing job: cloned gantt ($inner_id,$use_placeholder_name,,) from ($inner_id,,,)\n");
                    if ($timesharing_user ne "" and $timesharing_name ne "") {
                        $Gantt->{$inner_id}->{$use_placeholder_name}->{$timesharing_user}->{$timesharing_name} = dclone($Gantt->{$inner_id}->{""}->{$timesharing_user}->{$timesharing_name});
                        oar_debug("[$scheduler_name] [$i] use_placeholder/timesharing job: cloned gantt ($inner_id,$use_placeholder_name,$timesharing_user,$timesharing_name) from ($inner_id,,$timesharing_user,$timesharing_name)\n");
                    }
                } elsif (not defined($Gantt->{$inner_id}->{""}->{$timesharing_user}->{$timesharing_name})) { # G($i,$p,,) is defined
                    $Gantt->{$inner_id}->{""}->{$timesharing_user}->{$timesharing_user} = dclone($Gantt->{$inner_id}->{""}->{""}->{""});
                    oar_debug("[$scheduler_name] [$i] use_placeholder/timesharing job: cloned gantt ($inner_id,,$timesharing_user,$timesharing_name) from ($inner_id,,,)\n");
                    if ($use_placeholder_name ne "") {
                        $Gantt->{$inner_id}->{$use_placeholder_name}->{$timesharing_user}->{$timesharing_name} = dclone($Gantt->{$inner_id}->{$use_placeholder_name}->{""}->{""});
                        oar_debug("[$scheduler_name] [$i] use_placeholder/timesharing job: cloned gantt ($inner_id,$use_placeholder_name,$timesharing_user,$timesharing_name) from ($inner_id,$use_placeholder_name,,)\n");
                    }
                } else { # Both G($i,$p,,) and G($i,,$u,$n) are defined. We need to merge them to create G($i,$p,$u,$n) 
                    $Gantt->{$inner_id}->{$use_placeholder_name}->{$timesharing_user}->{$timesharing_name} = OAR::Schedulers::GanttHoleStorage::merge_clone($Gantt->{$inner_id}->{$use_placeholder_name}->{""}->{""},$Gantt->{$inner_id}->{""}->{$timesharing_user}->{$timesharing_name});
                    oar_debug("[$scheduler_name] [$i] use_placeholder/timesharing job: merged gantt ($inner_id,$use_placeholder_name,$timesharing_user,$timesharing_name) from ($inner_id,$use_placeholder_name,,) and ($inner_id,,$timesharing_user,$timesharing_name)\n");
                    #OAR::Schedulers::GanttHoleStorage::pretty_print($Gantt->{$inner_id}->{""}->{""}->{""});
                    #OAR::Schedulers::GanttHoleStorage::pretty_print($Gantt->{$inner_id}->{$use_placeholder_name}->{""}->{""});
                    #OAR::Schedulers::GanttHoleStorage::pretty_print($Gantt->{$inner_id}->{""}->{$timesharing_user}->{$timesharing_name});
                    #OAR::Schedulers::GanttHoleStorage::pretty_print($Gantt->{$inner_id}->{$use_placeholder_name}->{$timesharing_user}->{$timesharing_name});
                }
            }
        }

        #Fill all other gantts
        foreach my $p (keys(%{$Gantt->{$inner_id}})){
            foreach my $u (keys(%{$Gantt->{$inner_id}->{$p}})){
                foreach my $n (keys(%{$Gantt->{$inner_id}->{$p}->{$u}})){
                    if (not (($p ne "" and $p eq $set_placeholder_name) or ($u ne "" and $u eq $timesharing_user and $n ne "" and $n eq $timesharing_name))){
                        oar_debug("[$scheduler_name] [$i] add job occupation in gantt ($inner_id,$p,$u,$n)\n");
                        OAR::Schedulers::GanttHoleStorage::set_occupation( $Gantt->{$inner_id}->{$p}->{$u}->{$n},
                                                            $already_scheduled_jobs{$i}->[0],
                                                            $job_duration + $security_time_overhead,
                                                            $vec
                                                          );
                    } else {
                        if ($set_placeholder_name ne "") {
                            oar_debug("[$scheduler_name] [$i] skip job occupation in gantt ($inner_id,$p,$u,$n) because job is ($inner_id,s:$set_placeholder_name,,)\n");
                        } else {
                            oar_debug("[$scheduler_name] [$i] skip job occupation in gantt ($inner_id,$p,$u,$n) because job is ($inner_id,u:$use_placeholder_name,$timesharing_user,$timesharing_name)\n");
                        }
                    }
                    #oar_debug("[$scheduler_name] [$i] gantt ($inner_id,$p,$u,$n) is:\n");
                    #OAR::Schedulers::GanttHoleStorage::pretty_print($Gantt->{$inner_id}->{$p}->{$u}->{$n});
                }
            }
        }
    }
}

oar_debug("[$scheduler_name] End phase 1 (running jobs)\n");

# End of the initialisation
# Begining of the real scheduling

# Get list of Alive resources
my $alive_resources_vector = '';
foreach my $r (OAR::IO::get_resources_in_state($base,"Alive")){
    vec($alive_resources_vector, $r->{resource_id}, 1) = 1;
}

# ENERGY SAVING: add fake occupations/holes from energy saving configuration 
# CM part and Hulot part (wake up nodes in energy saving mode)
if (is_conf("SCHEDULER_NODE_MANAGER_WAKE_UP_CMD") or (get_conf("ENERGY_SAVING_INTERNAL") eq "yes" and is_conf("ENERGY_SAVING_NODE_MANAGER_WAKE_UP_CMD"))){
    oar_debug("[$scheduler_name] Begin EnergySaving phase\n");
    # Check the resources that can be waked_up or shut down
    my $upto_availability = OAR::IO::get_energy_saving_resources_availability($base, $current_time);
    foreach my $t (keys(%{$upto_availability})){
        my $vec = '';
        foreach my $r (@{$upto_availability->{$t}}){
            vec($alive_resources_vector, $r, 1) = 1;
            vec($vec,$r,1) = 1;
        }
        #Fill all the gantts
        foreach my $c (keys(%{$Gantt})){
            foreach my $p (keys(%{$Gantt->{$c}})){
                foreach my $u (keys(%{$Gantt->{$c}->{$p}})){
                    foreach my $n (keys(%{$Gantt->{$c}->{$p}->{$u}})){
                        oar_debug("[$scheduler_name] Add energy saving occupation in gantt ($c,$p,$u,$n)\n");
                        OAR::Schedulers::GanttHoleStorage::set_occupation( $Gantt->{$c}->{$p}->{$u}->{$n},
                                                 $t,
                                                 OAR::Schedulers::GanttHoleStorage::get_infinity_value(),
                                                 $vec
                                              );
                    }
                }
            }
        }
    }
    oar_debug("[$scheduler_name] End EnergySaving phase\n");
}
# CM part
 
my @Dead_resources;
foreach my $r (OAR::IO::get_resources_in_state($base,"Dead")){
    push(@Dead_resources, $r->{resource_id});
}

oar_debug("[$scheduler_name] Begin phase 2 (waiting jobs)\n");
my @jobs = OAR::IO::get_jobs_to_schedule($base,$queue,$max_waiting_jobs_to_schedule);
my $job_index = 0;
while (($job_index <= $#jobs) and ((time() - $initial_time) < $timeout)){
    my $j = $jobs[$job_index];
    my $i = $j->{job_id};
    $job_index ++;
    oar_debug("[$scheduler_name] [$i] start scheduling\n");
    
    my $scheduler_init_date = $current_time;
    # Search for dependencies
    my $skip_job = 0;

    # Check the job dependencies 
    foreach my $d (OAR::IO::get_current_job_dependencies($base,$i)){
        next if ($skip_job == 1);
        my $dep_job = OAR::IO::get_job($base,$d);
        if (($dep_job->{state} ne "Terminated")){
            my @date_tmp = OAR::IO::get_gantt_job_start_time($base,$d);
            if (defined($date_tmp[0])){
                my $mold_dep = OAR::IO::get_current_moldable_job($base,$date_tmp[1]);
                my $sched_tmp = $date_tmp[0] + $mold_dep->{moldable_walltime};
                if ($scheduler_init_date < $sched_tmp){
                    $scheduler_init_date = $sched_tmp + (2 * $security_time_overhead);
                }
            }else{
                my $message = "Cannot determine scheduling time due to dependency with the job $d";
                OAR::IO::set_job_message($base,$i,$message);
                OAR::IO::set_job_scheduler_info($base,$i,$message);
                oar_debug("[$scheduler_name] [$i] $message\n");
                $skip_job = 1;
                next;
            }
        }elsif (($dep_job->{job_type} eq "PASSIVE") and ($dep_job->{exit_code} != 0)){
            my $message = "Cannot determine scheduling time due to dependency with the job $d (exit code != 0)";
            OAR::IO::set_job_message($base,$i,$message);
            OAR::IO::set_job_scheduler_info($base,$i,$message);
            oar_debug("[$scheduler_name] [$i] $message\n");
            $skip_job = 1;
            next;
        }
    }
    next if ($skip_job == 1);

    my $container_id = 0;
    my $inner_id = 0;
    my $set_placeholder_name = "";
    my $use_placeholder_name = "";
    my $timesharing_user = "";
    my $timesharing_name = "";
    my $types = OAR::IO::get_current_job_types($base,$i);
    if (defined($types->{inner}) and ($types->{inner} =~ /^(\d+)$/)){
        $inner_id = $1;
        if (defined($Gantt->{$inner_id}->{""}->{""}->{""})){
            oar_debug("[$scheduler_name] [$i] inner job: using container $inner_id\n");
        }else{
            oar_debug("[$scheduler_name] [$i] inner job: container $inner_id does not exist.\n");
            OAR::IO::set_job_message($base,$i,"Container $inner_id does not exist");
            OAR::IO::set_job_scheduler_info($base,$i,"Container $inner_id does not exist");
            $inner_id=0;
            next;
        }
    }
    if (defined($types->{container})){ # A container job cannot be set_placeholder or use_placeholder or timesharing. 
        oar_debug("[$scheduler_name] [$i] job is ($inner_id,,,) and is a container\n");
    } elsif (defined($types->{set_placeholder})){ # A set_placeholder job cannot be use_placeholder or timesharing. 
        $set_placeholder_name = $types->{set_placeholder};
        oar_debug("[$scheduler_name] [$i] job is ($inner_id,s:$set_placeholder_name,,)\n");
        if (not defined($Gantt->{$inner_id}->{$set_placeholder_name}->{""}->{""})){
            $Gantt->{$inner_id}->{$set_placeholder_name}->{""}->{""} = dclone($Gantt->{$inner_id}->{""}->{""}->{""});
            oar_debug("[$scheduler_name] [$i] set_placeholder job: cloned gantt ($inner_id,$set_placeholder_name,,) from ($inner_id,,,)\n");
        }
    } else {
        if (defined($types->{use_placeholder})){
            $use_placeholder_name = $types->{use_placeholder};
        }
        if (defined($types->{timesharing})){
            ($timesharing_user, $timesharing_name) = parse_timesharing($types->{timesharing}, $j->{job_user}, $j->{job_name});
        }
        oar_debug("[$scheduler_name] [$i] job is ($inner_id,u:$use_placeholder_name,$timesharing_user,$timesharing_name)\n");
        if (not defined($Gantt->{$inner_id}->{$use_placeholder_name}->{$timesharing_user}->{$timesharing_name})){
            if (not defined($Gantt->{$inner_id}->{$use_placeholder_name}->{""}->{""}) and not defined($Gantt->{$inner_id}->{""}->{$timesharing_user}->{$timesharing_name})) {
                $Gantt->{$inner_id}->{$use_placeholder_name}->{$timesharing_user}->{$timesharing_name} = dclone($Gantt->{$inner_id}->{""}->{""}->{""});
                oar_debug("[$scheduler_name] [$i] use_placeholder/timesharing job: cloned gantt ($inner_id,$use_placeholder_name,$timesharing_user,$timesharing_name) from ($inner_id,,,)\n");
                if ($use_placeholder_name ne "") {
                    $Gantt->{$inner_id}->{$use_placeholder_name}->{""}->{""} = dclone($Gantt->{$inner_id}->{""}->{""}->{""});
                    oar_debug("[$scheduler_name] [$i] use_placeholder/timesharing job: cloned gantt ($inner_id,$use_placeholder_name,,) from ($inner_id,,,)\n");
                }
                if ($timesharing_user ne "" or $timesharing_name ne "") {
                    $Gantt->{$inner_id}->{""}->{$timesharing_user}->{$timesharing_user} = dclone($Gantt->{$inner_id}->{""}->{""}->{""});
                    oar_debug("[$scheduler_name] [$i] use_placeholder/timesharing job: cloned gantt ($inner_id,,$timesharing_user,$timesharing_name) from ($inner_id,,,)\n");
                }
            } elsif (not defined($Gantt->{$inner_id}->{$use_placeholder_name}->{""}->{""})) { #G($i,,$u,$n) is defined
                $Gantt->{$inner_id}->{$use_placeholder_name}->{""}->{""} = dclone($Gantt->{$inner_id}->{""}->{""}->{""});
                oar_debug("[$scheduler_name] [$i] use_placeholder/timesharing job: cloned gantt ($inner_id,$use_placeholder_name,,) from ($inner_id,,,)\n");
                if ($timesharing_user ne "" and $timesharing_name ne "") {
                    $Gantt->{$inner_id}->{$use_placeholder_name}->{$timesharing_user}->{$timesharing_name} = dclone($Gantt->{$inner_id}->{""}->{$timesharing_user}->{$timesharing_name});
                    oar_debug("[$scheduler_name] [$i] use_placeholder/timesharing job: cloned gantt ($inner_id,$use_placeholder_name,$timesharing_user,$timesharing_name) from ($inner_id,,$timesharing_user,$timesharing_name)\n");
                }
            } elsif (not defined($Gantt->{$inner_id}->{""}->{$timesharing_user}->{$timesharing_name})) { # G($i,$p,,) is defined
                $Gantt->{$inner_id}->{""}->{$timesharing_user}->{$timesharing_user} = dclone($Gantt->{$inner_id}->{""}->{""}->{""});
                oar_debug("[$scheduler_name] [$i] use_placeholder/timesharing job: cloned gantt ($inner_id,,$timesharing_user,$timesharing_name) from ($inner_id,,,)\n");
                if ($use_placeholder_name ne "") {
                    $Gantt->{$inner_id}->{$use_placeholder_name}->{$timesharing_user}->{$timesharing_name} = dclone($Gantt->{$inner_id}->{$use_placeholder_name}->{""}->{""});
                    oar_debug("[$scheduler_name] [$i] use_placeholder/timesharing job: cloned gantt ($inner_id,$use_placeholder_name,$timesharing_user,$timesharing_name) from ($inner_id,$use_placeholder_name,,)\n");
                }
            } else { # Both G($i,$p,,) and G($i,,$u,$n) are defined. We need to merge them to create G($i,$p,$u,$n) 
                $Gantt->{$inner_id}->{$use_placeholder_name}->{$timesharing_user}->{$timesharing_name} = OAR::Schedulers::GanttHoleStorage::merge_clone($Gantt->{$inner_id}->{$use_placeholder_name}->{""}->{""},$Gantt->{$inner_id}->{""}->{$timesharing_user}->{$timesharing_name});
                oar_debug("[$scheduler_name] [$i] use_placeholder/timesharing job: merged gantt ($inner_id,$use_placeholder_name,$timesharing_user,$timesharing_name) from ($inner_id,$use_placeholder_name,,) and ($inner_id,,$timesharing_user,$timesharing_name)\n");
                #OAR::Schedulers::GanttHoleStorage::pretty_print($Gantt->{$inner_id}->{""}->{""}->{""});
                #OAR::Schedulers::GanttHoleStorage::pretty_print($Gantt->{$inner_id}->{$use_placeholder_name}->{""}->{""});
                #OAR::Schedulers::GanttHoleStorage::pretty_print($Gantt->{$inner_id}->{""}->{$timesharing_user}->{$timesharing_name});
                #OAR::Schedulers::GanttHoleStorage::pretty_print($Gantt->{$inner_id}->{$use_placeholder_name}->{$timesharing_user}->{$timesharing_name});
            }
        }
    }

    my $job_properties = "\'1\'";
    if ((defined($j->{properties})) and ($j->{properties} ne "")){
        $job_properties = $j->{properties};
    }
    
    # Choose the moldable job to schedule
    my @moldable_results;
    my $job_descriptions = OAR::IO::get_resources_data_structure_current_job($base,$i);
    foreach my $moldable (@{$job_descriptions}){
        my $duration;
        if (defined($types->{besteffort})){
            $duration = $besteffort_duration;
        }else{
            $duration = $moldable->[1] + $security_time_overhead;
        }

        my @tree_list;
        foreach my $m (@{$moldable->[0]}){
            my $tmp_properties = "\'1\'";
            if ((defined($m->{property})) and ($m->{property} ne "")){
                $tmp_properties = $m->{property};
            }
            my $tmp_tree = OAR::IO::get_possible_wanted_resources($base_ro,$alive_resources_vector,undef,\@Dead_resources,"$job_properties AND $tmp_properties", $m->{resources}, $Order_part);
            push(@tree_list, $tmp_tree);
        }
        my $gantt_timeout =  ($timeout - (time() - $initial_time)) / 4;
        $gantt_timeout = $Minimum_timeout_per_job if ($gantt_timeout <= ($timeout / 8));
        oar_debug("[$scheduler_name] [$i] find_first_hole in gantt ($inner_id,$use_placeholder_name,$timesharing_user,$timesharing_name) with a timeout of $gantt_timeout\n");
        my @hole;
        if ($Max_nb_processes <= 1){
            @hole = OAR::Schedulers::GanttHoleStorage::find_first_hole($Gantt->{$inner_id}->{$use_placeholder_name}->${$timesharing_user}->{$timesharing_name}, $scheduler_init_date, $duration, \@tree_list,$gantt_timeout);
        }else{
            oar_debug("[$scheduler_name] [$i] using Gantt PARALLEL algorithm\n");
            @hole = OAR::Schedulers::GanttHoleStorage::find_first_hole_parallel($Gantt->{$inner_id}->{$use_placeholder_name}->{$timesharing_user}->{$timesharing_name}, $scheduler_init_date, $duration, \@tree_list,$gantt_timeout,$Max_nb_processes);
        }
        my @res_trees;
        my @resources;
        foreach my $t (@{$hole[1]}){
            push(@res_trees, $t);
            foreach my $r (OAR::Schedulers::ResourceTree::get_tree_leafs($t)){
                push(@resources, OAR::Schedulers::ResourceTree::get_current_resource_value($r));
            }
        }
        push(@moldable_results, {
                                    resources => \@resources,
                                    start_date => $hole[0],
                                    duration => $duration,
                                    moldable_id => $moldable->[2]
                                });
    }

    # Choose moldable job which will finish first
    oar_debug("[$scheduler_name] [$i] choosing moldable job which will finish first\n");
    my $index_to_choose = -1;
    my $best_stop_time;
    for (my $m=0; $m <= $#moldable_results; $m++){
        if ($#{$moldable_results[$m]->{resources}} >= 0){
            my $tmp_stop_date = $moldable_results[$m]->{start_date} + $moldable_results[$m]->{duration};
            if ((!defined($best_stop_time)) or ($best_stop_time > $tmp_stop_date)){
                $best_stop_time = $tmp_stop_date;
                $index_to_choose = $m;
            }
        }
    }
    if ($index_to_choose >= 0){
        # Job is successfully scheduled
        oar_debug("[$scheduler_name] [$i] job is successfully scheduled\n");
        my $vec = '';
        foreach my $r (@{$moldable_results[$index_to_choose]->{resources}}){
            vec($vec, $r, 1) = 1;
        }

        # Create gantt for the new container
        if (defined($types->{container})){
            $container_id = $i;
            oar_debug("[$scheduler_name] [$i] container job: create gantt ($container_id,,,)\n");
            $Gantt->{$container_id}->{""}->{""}->{""} = OAR::Schedulers::GanttHoleStorage::new_with_1_hole($max_resources, $minimum_hole_time, $moldable_results[$index_to_choose]->{start_date}, $moldable_results[$index_to_choose]->{duration}, $vec, $All_resource_list_vec);
        }

        #Fill all other gantts
        foreach my $p (keys(%{$Gantt->{$inner_id}})){
            foreach my $u (keys(%{$Gantt->{$inner_id}->{$p}})){
                foreach my $n (keys(%{$Gantt->{$inner_id}->{$p}->{$u}})){
                    if (not (($p ne "" and $p eq $set_placeholder_name) or ($u ne "" and $u eq $timesharing_user and $n ne "" and $n eq $timesharing_name))){
                        oar_debug("[$scheduler_name] [$i] add job occupation in gantt ($inner_id,$p,$u,$n)\n");
                        OAR::Schedulers::GanttHoleStorage::set_occupation( $Gantt->{$inner_id}->{$p}->{$u}->{$n},
                                                            $moldable_results[$index_to_choose]->{start_date},
                                                            $moldable_results[$index_to_choose]->{duration},
                                                            $vec
                                                          );
                    } else {
                        if ($set_placeholder_name ne "") {
                            oar_debug("[$scheduler_name] [$i] skip job occupation in gantt ($inner_id,$p,$u,$n) because job is ($inner_id,s:$set_placeholder_name,,)\n");
                        } else {
                            oar_debug("[$scheduler_name] [$i] skip job occupation in gantt ($inner_id,$p,$u,$n) because job is ($inner_id,u:$use_placeholder_name,$timesharing_user,$timesharing_name)\n");
                        }
                    }
                    #oar_debug("[$scheduler_name] [$i] gantt ($inner_id,$p,$u,$n) is:\n");
                    #OAR::Schedulers::GanttHoleStorage::pretty_print($Gantt->{$inner_id}->{$p}->{$u}->{$n});
                }
            }
        }

        #update database
        push(@{$moldable_results[$index_to_choose]->{resources}},@Resources_to_always_add);
        OAR::IO::add_gantt_scheduled_jobs($base,$moldable_results[$index_to_choose]->{moldable_id}, $moldable_results[$index_to_choose]->{start_date},$moldable_results[$index_to_choose]->{resources});
        OAR::IO::set_job_message($base,$i,"FIFO scheduling OK");
        OAR::IO::set_job_scheduler_info($base,$i,"FIFO scheduling OK");
    }else{
        oar_debug("[$scheduler_name] [$i] job couldn't be scheduled\n");
        my $message = "cannot find enough resources for job $i";
        OAR::IO::set_job_message($base,$i,$message);
        OAR::IO::set_job_scheduler_info($base,$i,$message);
        oar_debug("[$scheduler_name] [$i] $message\n");
    }
    oar_debug("[$scheduler_name] [$i] end scheduling\n");
}
oar_debug("[$scheduler_name] End phase 2 (waiting jobs)\n");


OAR::IO::disconnect($base);
OAR::IO::disconnect($base_ro);

if ($job_index <= $#jobs){
    oar_debug("[$scheduler_name] Warning: some jobs were not scheduled because the scheduler's timeout was reached ($timeout s)\n");
}

oar_debug("[$scheduler_name] End of scheduler for queue $queue\n");

