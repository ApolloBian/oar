#!/bin/bash
# Detect resources on a list of nodes and print corresponding OAR commands
#set -x

while getopts "c:e:n:p:o:h" opt; do
    case $opt in
    c)
        OARCONFFILE=$OPTARG
        ;;
    e)
        OPENSSH_CMD=$OPTARG
        ;;
    n)  
        OARNODES_CMD=$OPTARG
        ;;
    p)
        OARPROPERTY_CMD=$OPTARG
        ;;
    o)
        GENERATED_COMMANDS_FILE=$OPTARG
        ;;
    H)
        WITH_HT=1
        ;;
    h)
        cat <<EOF
Usage:
    $0 [-c <>] [-e <>] [-n <>] [-p <>] [-o <>] [-H] <node_file>
Options:
    -c  path to oar.conf
    -e  ssh command
    -n  oarnodes command (may be remote, via ssh)
    -p  oarproperty command
    -o  output file for generated commands
    -H  handle HyperThreading
    -h  display this message

EOF
        exit 0
        ;;
    \?)
        echo "Invalid option: -$OPTARG" >&2
        exit 1
      ;;
  esac
done
OARCONFFILE=${OARCONFFILE:-/etc/oar/oar.conf}
OPENSSH_CMD=${OPENSSH_CMD:-/usr/bin/ssh}
OARNODES_CMD=${OARNODES_CMD:-oarnodes}
OARPROPERTY_CMD=${OARPROPERTY_CMD:-oarproperty}
GENERATED_COMMANDS_FILE=${GENERATED_COMMANDS_FILE:-/tmp/oar_resources_init.cmd}

. "$OARCONFFILE" || exit 20

# check the file with the nodes to add
if [ -z "$1" ] || [ ! -r "$1" ]; then
    echo "Please provide as argument a file containing the list of nodes to add to OAR resources (this file must be readable by user oar)"
    exit 1
fi

if ! $OARNODES_CMD --sql false 2> /dev/null; then
    echo "This script needs the oarnodes command from the oar-user package."
    echo "You can set the OARNODES_CMD environment variable to set its location path,"
    echo "or ssh command to run it from another host."
    exit 21
fi  

echo "Did you configured the OAR SSH key on all the nodes? [yes/NO] "
read l ; [ "$l" != "yes" -a "$l" != "YES" ] && exit 2

# Check output file
if [ -e "$GENERATED_COMMANDS_FILE" ]; then
    echo "Commands to run will be written into "$GENERATED_COMMANDS_FILE". Do you want to override it? [yes/NO] "
    read l ; [ "$l" != "yes" -a "$l" != "YES" ] && exit 3
    rm $GENERATED_COMMANDS_FILE || exit 4
fi

# Add properties
echo "$OARPROPERTY_CMD -a cpu" > $GENERATED_COMMANDS_FILE
echo "$OARPROPERTY_CMD -a core" >> $GENERATED_COMMANDS_FILE
[ -n "$WITH_HT" ] && echo "$OARPROPERTY_CMD -a thread" >> $GENERATED_COMMANDS_FILE
echo "$OARPROPERTY_CMD -c -a host" >> $GENERATED_COMMANDS_FILE
echo "$OARPROPERTY_CMD -a cpuset" >> $GENERATED_COMMANDS_FILE
echo "$OARPROPERTY_CMD -a mem" >> $GENERATED_COMMANDS_FILE

# Init CPU id
CPU=$($OARNODES_CMD --sql true | grep 'cpu=' | awk -F " cpu=" '{print $2}' | awk -F "," '{print $1}' | sort -r -n | head -1)
[ -z "$CPU" ] && CPU=0
# Init CORE id
CORE=$($OARNODES_CMD --sql true | grep 'core=' | awk -F " core=" '{print $2}' | awk -F "," '{print $1}' | sort -r -n | head -1)
[ -z "$CORE" ] && CORE=0
# Init THREAD id
if [ -n "$WITH_HT" ]; then
    THREAD=$($OARNODES_CMD --sql true | grep 'thread=' | awk -F " thread=" '{print $2}' | awk -F "," '{print $1}' | sort -r -n | head -1)
    [ -z "$THREAD" ] && THREAD=0
fi

echo
for host in $(< $1); do
    echo -n "Checking $host ... "

    # Store stderr and redirect it to /dev/null
    exec 3>&2
    exec 2> /dev/null

    mem=$($OPENSSH_CMD $host cat /proc/meminfo | grep ^MemTotal | awk '{print $2}')

    # Get CORE info in the form:
    # cpu:core
    # cpu:core
    # cpu:core
    # ...
    # of if WITH_TH:
    # cpu:core:thread
    # cpu:core:thread
    # cpu:core:thread
    # ...
    if [ -z "$WITH_HT" ]; then
        if [ "`$OPENSSH_CMD $host cat /proc/cpuinfo|grep 'physical id'`" != "" ]; then
            DATA=$($OPENSSH_CMD $host cat /proc/cpuinfo| awk '{if ($1 == "processor") core=$3; if ($1 == "physical" && $2 =="id") print $4 ":" core}'|sort -n)
        else
            DATA=$($OPENSSH_CMD $host cat /proc/cpuinfo| awk '{if ($1 == "processor") print $3 ":" $3}'|sort -n)
        fi
    else
        DATA=$($OPENSSH_CMD $host cat /proc/cpuinfo| awk '{if ($1 == "processor") core=$3; if ($1 == "physical" && $2 =="id") socket=$4; if ($1 == "core" && $2 =="id") print socket ":" $4 ":" core}'|sort -n)
    fi

    # Restore stderr
    exec 2>&3

    if [ -z "$mem" ] || [ -z "$DATA" ]; then
        echo "*** KO ***"
        rm $GENERATED_COMMANDS_FILE
        echo 
        echo "ERROR with node $host. Please check the ssh connection with oar user ($OPENSSH_CMD $host)..."
        exit 5
    fi

    ((mem = $mem / 1024 / 1024 + 1))
    if [ -z "$WITH_HT" ]; then
        prev_cpu="-1"
        for i in $DATA; do
            cpu=$(echo $i|awk -F: '{print $1}')
            core=$(echo $i|awk -F: '{print $2}')
            thread=$(echo $i|awk -F: '{print $3}')
            [ "$cpu" != "$prev_cpu" ] && ((CPU++))
            ((CORE++))
            prev_cpu=$cpu
            echo "oarnodesetting -a -h $host -p host=$host -p cpu=$CPU -p core=$CORE -p cpuset=$core -p mem=$mem" >> $GENERATED_COMMANDS_FILE
        done
    else
        prev_cpu="-1"
        prev_core="-1"
        for i in $DATA; do
            cpu=$(echo $i|awk -F: '{print $1}')
            core=$(echo $i|awk -F: '{print $2}')
            thread=$(echo $i|awk -F: '{print $3}')
            [ "$cpu" != "$prev_cpu" ] && ((CPU++))
            [ "$core" != "$prev_core" ] && ((CORE++))
            ((THREAD++))
            prev_cpu=$cpu
            prev_core=$core
            echo "oarnodesetting -a -h $host -p host=$host -p cpu=$CPU -p core=$CORE -p thread=$THREAD -p cpuset=$thread -p mem=$mem" >> $GENERATED_COMMANDS_FILE
        done
    fi
    echo "OK"
done



echo
echo "If the content of '$GENERATED_COMMANDS_FILE' is OK for you then you just need to execute:"
echo "  source $GENERATED_COMMANDS_FILE"

