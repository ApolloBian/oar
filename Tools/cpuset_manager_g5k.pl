# $Id$
# 
# The cpuset_manager script is a perl script that oar server deploys on nodes 
# to manage cpusets
# In addition this version open ssh access on the nodes if the special job type
# (see $Allow_SSH_type var) is used and if the related job only uses whole
# nodes.
#
# Usage:
# Script is executed as oar
# ARGV[0] can have two different values:
#     - "init"  : then this script must create the right cpuset and assign
#                 corresponding cpus
#     - "clean" : then this script must kill all processes in the cpuset and
#                 clean the cpuset structure

# TAKTUK_HOSTNAME envirionment variable must be defined and must be a name
# that we will be able to find in the transfered hashtable.
use strict;
use Fcntl ':flock';
use Data::Dumper;

my $Cpuset;
my $Cpuset_path = "oar";
my $Allow_SSH_type = "allow_classic_ssh";
die "Invalid cpuset_path: $Cpuset_path.\n" if $Cpuset_path =~ /\//;
my $Security_pam_file = "$ENV{HOME}/access.conf";
my $Security_pam_file_tmp = "$ENV{HOME}/access.conf.tmp";
my $Cpuset_lock_file = "$ENV{HOME}/cpuset.lock.";

my $tmp = "";
while (<STDIN>){
    $tmp .= $_;
}
$Cpuset = eval($tmp);

# Get the data structure only for this node
my $Cpuset_name = $Cpuset->{name};
my @Cpuset_cpus = @{$Cpuset->{nodes}->{$ENV{TAKTUK_HOSTNAME}}};
if (!defined($Cpuset_name)){
    print("[cpuset_manager] Bad SSH hashtable transfered\n");
    exit(2);
}


# From now, "Cpuset" is of the form: 
# $Cpuset = {
#               name => "cpuset name",
#               nodes => hostname => [array with all cpus of this cpuset]
#           }
#
# $Cpuset_name is the name of the cpuset
# @Cpuset_cpus is the list of the cpuset DB field for this host

if ($ARGV[0] eq "init"){
    # Initialize cpuset for this node

    print("[cpuset_manager] name = $Cpuset_name ; cpus = @Cpuset_cpus\n");
    if (system('sudo mount -t cpuset | grep " /dev/cpuset " > /dev/null 2>&1')){
        if (system('sudo mkdir -p /dev/cpuset && sudo mount -t cpuset none /dev/cpuset')){
            exit(4);
        }
    }
    if (!(-d '/dev/cpuset/'.$Cpuset_path)){
        if (system( 'sudo mkdir -p /dev/cpuset/'.$Cpuset_path.' &&'. 
                    'sudo chown -R oar /dev/cpuset/'.$Cpuset_path.' &&'.
                    '/bin/echo 0 | cat > /dev/cpuset/'.$Cpuset_path.'/notify_on_release && '.
                    '/bin/echo 0 | cat > /dev/cpuset/'.$Cpuset_path.'/cpu_exclusive && '.
                    'cat /dev/cpuset/mems > /dev/cpuset/'.$Cpuset_path.'/mems &&'.
                    'cat /dev/cpuset/cpus > /dev/cpuset/'.$Cpuset_path.'/cpus'
                  )){
            exit(4);
        }
    }
    
#'for c in '."@Cpuset_cpus".';do cat /sys/devices/system/cpu/cpu$c/topology/physical_package_id > /dev/cpuset/'.$Cpuset_name.'/mems; done && '.

    if (open(LOCK,">", $Cpuset_lock_file.$Cpuset->{user})){
        flock(LOCK,LOCK_EX) or die "flock failed: $!\n";
# Be careful with the physical_package_id. Is it corresponding to the memory bank?
        if (system( 'sudo mkdir -p /dev/cpuset/'.$Cpuset_path.'/'.$Cpuset_name.' && '.
                    'sudo chown -R oar /dev/cpuset/'.$Cpuset_path.'/'.$Cpuset_name.' && '.
                    '/bin/echo 0 | cat > /dev/cpuset/'.$Cpuset_path.'/'.$Cpuset_name.'/notify_on_release && '.
                    '/bin/echo 0 | cat > /dev/cpuset/'.$Cpuset_path.'/'.$Cpuset_name.'/cpu_exclusive && '.
                    'cat /dev/cpuset/mems > /dev/cpuset/'.$Cpuset_path.'/'.$Cpuset_name.'/mems && '.
                    '/bin/echo '.join(",",@Cpuset_cpus).' | cat > /dev/cpuset/'.$Cpuset_path.'/'.$Cpuset_name.'/cpus'
                  )){
            exit(5);
        }
        flock(LOCK,LOCK_UN) or die "flock failed: $!\n";
        close(LOCK);
    }else{
        warn("[cpuset_manager] Error opening $Cpuset_lock_file\n");
        exit(16);
    }

    # PAM part
    if (!defined($Cpuset->{types}->{timesharing})){
        my $file_str = "# File generated by OAR.\n";
        if (defined($Cpuset->{types}->{$Allow_SSH_type}) and ! system('diff /dev/cpuset/'.$Cpuset_path.'/'.$Cpuset_name.'/cpus /dev/cpuset/'.$Cpuset_path.'/cpus > /dev/null 2>&1')){
            $file_str .= "+:".$Cpuset->{user}.":ALL\n";
        }
        $file_str .= "-:ALL:ALL\n";
        if (open(ACCESS, "> $Security_pam_file_tmp")){
            print(ACCESS "$file_str");
            close(ACCESS);
        }else{
            exit(14);
        }
        rename $Security_pam_file_tmp,$Security_pam_file or die "Cannot replace access.conf file.";
    }
    # PAM part

    # Copy ssh key files
    if ($Cpuset->{ssh_keys}->{private}->{key} ne ""){
        # First, create the tmp oar directory
        if (!(((-d $Cpuset->{oar_tmp_directory}) and (-O $Cpuset->{oar_tmp_directory})) or (mkdir($Cpuset->{oar_tmp_directory})))){
            print("[cpuset_manager] Directory $Cpuset->{oar_tmp_directory} does not exist and cannot be created\n");
            exit(13);
        }
        # private key
        if (open(PRIV, ">".$Cpuset->{ssh_keys}->{private}->{file_name})){
            chmod(0600,$Cpuset->{ssh_keys}->{private}->{file_name});
            if (!print(PRIV $Cpuset->{ssh_keys}->{private}->{key})){
                warn("[cpuset_manager] Error writing $Cpuset->{ssh_keys}->{private}->{file_name} \n");
                unlink($Cpuset->{ssh_keys}->{private}->{file_name});
                exit(8);
            }
            close(PRIV);
        }else{
            warn("[cpuset_manager] Error opening $Cpuset->{ssh_keys}->{private}->{file_name} \n");
            exit(7);
        }

        # public key
        if (open(PUB,"+<",$Cpuset->{ssh_keys}->{public}->{file_name})){
            flock(PUB,LOCK_EX) or die "flock failed: $!\n";
            my $out = "\n".$Cpuset->{ssh_keys}->{public}->{key}."\n";
            while (<PUB>){
                if ($_ =~ /environment=\"OAR_KEY=1\"/){
                    # We are reading a OAR key
                    $_ =~ /(ssh-dss|ssh-rsa)\s+([^\s^\n]+)/;
                    my $oar_key = $2;
                    $Cpuset->{ssh_keys}->{public}->{key} =~ /(ssh-dss|ssh-rsa)\s+([^\s^\n]+)/;
                    my $curr_key = $2;
                    if ($curr_key eq $oar_key){
                        warn("[cpuset_manager] ERROR: the user has specified the same ssh key than used by the user oar.\n");
                        exit(13);
                    }
                    $out .= $_;
                }elsif ($_ =~ /environment=\"OAR_CPUSET=([\w\/]+)\"/){
                    # Remove from authorized keys outdated keys (typically after a reboot)
                    if (-d "/dev/cpuset/$1"){
                        $out .= $_;
                    }
                }else{
                    $out .= $_;
                }
            }
            if (!(seek(PUB,0,0) and print(PUB $out) and truncate(PUB,tell(PUB)))){
                warn("[cpuset_manager] Error writing $Cpuset->{ssh_keys}->{public}->{file_name} \n");
                exit(9);
            }
            flock(PUB,LOCK_UN) or die "flock failed: $!\n";
            close(PUB);
        }else{
            unlink($Cpuset->{ssh_keys}->{private}->{file_name});
            warn("[cpuset_manager] Error opening $Cpuset->{ssh_keys}->{public}->{file_name} \n");
            exit(10);
        }
    }
}elsif ($ARGV[0] eq "clean"){
    # delete ssh key files
    if ($Cpuset->{ssh_keys}->{private}->{key} ne ""){
        # private key
        unlink($Cpuset->{ssh_keys}->{private}->{file_name});

        # public key
        if (open(PUB,"+<", $Cpuset->{ssh_keys}->{public}->{file_name})){
            flock(PUB,LOCK_EX) or die "flock failed: $!\n";
            #Change file on the fly
            my $out = "";
            while (<PUB>){
                if (($_ ne "\n") and ($_ ne $Cpuset->{ssh_keys}->{public}->{key})){
                    $out .= $_;
                }
            }
            if (!(seek(PUB,0,0) and print(PUB $out) and truncate(PUB,tell(PUB)))){
                warn("[cpuset_manager] Error changing $Cpuset->{ssh_keys}->{public}->{file_name} \n");
                exit(12);
            }
            flock(PUB,LOCK_UN) or die "flock failed: $!\n";
            close(PUB);
        }else{
            warn("[cpuset_manager] Error opening $Cpuset->{ssh_keys}->{public}->{file_name} \n");
            exit(11);
        }
    }

    # PAM part
    if (!defined($Cpuset->{types}->{timesharing})){
        my $file_str = "# File generated by OAR.\n";
        $file_str .= "-:ALL:ALL\n";
        if (open(ACCESS, "> $Security_pam_file_tmp")){
            print(ACCESS "$file_str");
            close(ACCESS);
        }else{
            exit(14);
        }
        rename $Security_pam_file_tmp,$Security_pam_file or die "Cannot replace access.conf file.";
        if (defined($Cpuset->{types}->{$Allow_SSH_type}) and ! system('diff /dev/cpuset/'.$Cpuset_path.'/'.$Cpuset_name.'/cpus /dev/cpuset/'.$Cpuset_path.'/cpus > /dev/null 2>&1')){
            unless ($Cpuset->{user} eq "root" or $Cpuset->{user} eq "oar") {
                system("sudo -u $Cpuset->{user} kill -9 -1");
            }
        }
    }
    # PAM part

    # Clean cpuset on this node
    system('PROCESSES=$(cat /dev/cpuset/'.$Cpuset_path.'/'.$Cpuset_name.'/tasks)
            while [ "$PROCESSES" != "" ]
            do
                sudo kill -9 $PROCESSES
                PROCESSES=$(cat /dev/cpuset/'.$Cpuset_path.'/'.$Cpuset_name.'/tasks)
            done'
          );

    if (open(LOCK,">", $Cpuset_lock_file.$Cpuset->{user})){
        flock(LOCK,LOCK_EX) or die "flock failed: $!\n";
        if (system('sudo rmdir /dev/cpuset/'.$Cpuset_path.'/'.$Cpuset_name)){
            # Uncomment this line if you want to use several network_address properties
            # which are the same physical computer (linux kernel)
            # exit(0);
            exit(6);
        }
        my @cpusets = ();
        if (opendir(DIR, "/dev/cpuset/".$Cpuset_path.'/')) {
            @cpusets = grep { /^$Cpuset->{user}_\d+$/ } readdir(DIR);
            closedir DIR;
        } else {
            warn ("Can't opendir: /dev/cpuset/$Cpuset_path\n");
            exit(18);
        }
        if ($#cpusets < 0) {
            print ("Purging /tmp...\n");
            system("sudo find /tmp -user $Cpuset->{user} -exec rm -rfv {} \\;"); 
            my $ipcrm_args="";
            if (open(IPC,"sudo -u $Cpuset->{user} ipcs -c|")) {
                my $opt="";
                while (<IPC>) {
                    if (/^(\d+)\s+\d+\s+\w+\s+\w+\s+$Cpuset->{user}\s+\w+\s*$/) {
                        $ipcrm_args .= " -$opt $1";
                    } elsif (/- Shared Memory Segment/) {
                        $opt = 'm';
                    } elsif (/- Semaphore Arrays/) {
                        $opt = 's';
                    } elsif (/- Message Queues/) {
                        $opt = 'q';
                    }
                }
                close (IPC);
            }
            if ($ipcrm_args) {
                print ("Purging SysV IPC: ipcrm $ipcrm_args\n");
                system("sudo -u $Cpuset->{user} ipcrm $ipcrm_args"); 
            }
        } else {
            print("Not purging SysV IPC and /tmp as $Cpuset->{user} still as a job on this host.\n");
        }
        flock(LOCK,LOCK_UN) or die "flock failed: $!\n";
        close(LOCK);
    }else{
        warn("[cpuset_manager] Error opening $Cpuset_lock_file\n");
        exit(17);
    }
}else{
    print("[cpuset_manager] Bad command line argument $ARGV[0].\n");
    exit(3);
}

exit(0);

