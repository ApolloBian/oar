#!/usr/bin/perl
#
# SUDO for OAR = OARDO
# This script must be setuid root.
# Cases for the use of this script:
#
#   - user $Oaruser executes this script and OARDO_BECOME_USER is empty
#       --> if @ARGV is empty
#               then run the root shell with a dash in front of the process
#               name (login shell)
#           else
#               @ARGV is executed with root privileges
#
#   - user $Oaruser executes this script and OARDO_BECOME_USER is set
#       --> if @ARGV is empty
#               then run the OARDO_BECOME_USER shell with a dash in front of
#               the process name (login shell)
#           else
#               if OARDO_USE_USER_SHELL is set
#                   then execute "shell @ARGV" with OARDO_BECOME_USER
#                   privileges and shell user
#               else
#                   @ARGV is executed with OARDO_BECOME_USER privileges
#
#   - a user, different of $Oaruser, executes this script
#       --> only $Cmd_wrapper can be executed with $Oaruser privileges with
#           @ARGV arguments

#use strict;
#use warnings;

###############################################################################
# Static conf to edit #
#######################

my $Cmd_wrapper = "";

my $Oardir = "";
my $Oarconffile = "/etc/oar/oar.conf";
my $Oarxauthlocation = "/usr/bin/xauth";
my $Oaruser = "oar";

###############################################################################

$ENV{OARDO_USER} = getpwuid($<);
$ENV{OARDO_UID} = $<;
$ENV{OARDIR} = $Oardir;
$ENV{PERL5LIB} = $Oardir;
$ENV{OARUSER} = $Oaruser;
$ENV{OARCONFFILE} = $Oarconffile;
$ENV{OARXAUTHLOCATION} = $Oarxauthlocation;

my @clean_argv;
# BEGIN CLEAN

# Clean ARGV to prevent tainted perl behaviour
for (my $i=0; $i <= $#ARGV; $i++){
    my $str = "";
    foreach my $l (split("\n",$ARGV[$i])){
        $l =~ m/(.*)/m;
        $str .= $1."\n";
    }
    chop($str);
    $clean_argv[$i] = $str;
}
#warn("@clean_argv\n");

# unset shell variables
delete @ENV{qw(IFS CDPATH ENV BASH_ENV MAIL)};

# clean PATH
$ENV{PATH} =~ m/^(.*)$/m; 
$ENV{PATH} = $1;

# END CLEAN

sub change_process_owner($){
    my $user = shift;

    my @tmp = getpwnam($user);
    if ($#tmp < 0){
        warn("oardo: Cannot get information from user '$user'.\n");
        exit(2);
    }
    
    $( = "$tmp[3] $tmp[3]";
    if ($!){
        warn("oardo: Cannot set GID to '$tmp[3]'.\n");
        exit(2);
    }
    $) = "$tmp[3] $tmp[3]";
    if ($!){
        warn("oardo: Cannot set EGID to '$tmp[3]'.\n");
        exit(2);
    }
    $< = $tmp[2];
    if ($!){
        warn("oardo: Cannot set UID to '$user'.\n");
        exit(2);
    }
    $> = $tmp[2];
    if ($!){
        warn("oardo: Cannot set EUID to '$user'.\n");
        exit(2);
    }
    $ENV{USER} = $user;
    $ENV{LOGNAME} = $user;
    $ENV{SHELL} = $tmp[8];
    $ENV{HOME} = $tmp[7];
}

if ($Cmd_wrapper ne ""){
    # Try to execute a specific command by a lambda user
    change_process_owner($Oaruser);
    exec($Cmd_wrapper,@clean_argv);
    warn("oardo: Cannot execute with oar privileges : @clean_argv\n");
    exit(1);
}

my $oar_uid = getpwnam($Oaruser);
if ($< == $oar_uid){
    # We are oar so we want to execute the command with root privileges
    my $user = "root";
    if (defined($ENV{OARDO_BECOME_USER}) and ($ENV{OARDO_BECOME_USER} ne "")){
        $user = $ENV{OARDO_BECOME_USER};
        delete($ENV{OARDO_BECOME_USER});
    }
    change_process_owner($user);
    if ($#clean_argv < 0){
        # Login shell
        $ENV{HOME} =~ m/(.*)/m;
        my $home = $1;
        chdir($home);
        $ENV{SHELL} =~ m/(.*)/m;
        my $shell = $1;
        my @tmp = split('/',$shell);
        exec({$shell} "-$tmp[$#tmp]");
    }else{
        if (defined($ENV{OARDO_USE_USER_SHELL}) and ($ENV{OARDO_USE_USER_SHELL} ne "")){
            delete($ENV{OARDO_USE_USER_SHELL});
            $ENV{HOME} =~ m/(.*)/m;
            my $home = $1;
            chdir($home);
            $ENV{SHELL} =~ m/(.*)/m;
            my $shell = $1;
            exec({$shell} $shell,@clean_argv);
        }else{
            exec(@clean_argv);
        }
    }
    warn("oardo: Cannot execute with oar privileges : @clean_argv.\n");
    exit(1);
}else{
    warn("oardo: You are not oar so you cannot use this command.\n");
    exit(3);
}

