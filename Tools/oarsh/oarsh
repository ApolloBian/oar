#!/bin/bash
# $Id$
# In sshd_config you must have this line :
#     AcceptEnv OAR_CPUSET SUDO_USER
# User to become is in $SUDO_USER
# $OAR_CPUSET contains the cpuset name

###############################################################################
# Default variable definitions.
# If you want to change them then make it in the configuration file (oar.conf)
#
#echo "OAR configuration file : $OARCONFFILE"

OARSH_OARSTAT_CMD=
OPENSSH_CMD=/usr/bin/ssh
OARSH_OPENSSH_DEFAULT_OPTIONS="-oProxyCommand=none -oPermitLocalCommand=no"
###############################################################################

source $OARCONFFILE || exit 7

export OAR_CPUSET=""

# Add security option for X11 forwarding
XAUTH_LOCATION="/usr/bin/X11/xauth"
if [ -x "$XAUTH_LOCATION" ]
then
    OARSH_OPENSSH_DEFAULT_OPTIONS="$OARSH_OPENSSH_DEFAULT_OPTIONS -o XAuthLocation=$XAUTH_LOCATION"
else
    OARSH_OPENSSH_DEFAULT_OPTIONS="$OARSH_OPENSSH_DEFAULT_OPTIONS -o XAuthLocation=/bin/true"
fi

if [ -z "$OAR_RUNTIME_DIRECTORY" ]
then
    OAR_RUNTIME_DIRECTORY="/tmp/oar_runtime"
fi

# Get the name of the current cpuset #
function get_current_cpuset() {
    CPUSETFILE=/proc/self/cpuset

    if [ -r $CPUSETFILE ]
    then
        echo $(< $CPUSETFILE)
    fi
}

# Manage display
function manage_display() {
    if [ -n "$DISPLAY" ]
    then
        if [ -x "$XAUTH_LOCATION" ]
        then
            # first, get rid of remaining unused .Xautority.{pid} files if any...
            for f in $HOME/.Xauthority.*; do
                [ -e "/proc/${f#$HOME/.Xauthority.}" ] || rm -f $f
            done
            # set the .Xautority.{pid} file as the xauthority file.
            export XAUTHORITY=$HOME/.Xauthority.$$
            # retrieve the X cookie from the user to user oar.
            sudo -H -u $SUDO_USER bash -c "unset XAUTHORITY; $XAUTH_LOCATION extract - ${DISPLAY#localhost}" | $XAUTH_LOCATION merge - 2> /dev/null
            # ssh will push that cookie in the connection.
        fi
    fi
}

###############################################################################
# Main

manage_display

# connection using a user provided job key file 
if [ -n "$OAR_JOB_KEY_FILE" ] 
then
    if [ -r $OAR_JOB_KEY_FILE ]
    then
        exec $OPENSSH_CMD $OARSH_OPENSSH_DEFAULT_OPTIONS -i "$OAR_JOB_KEY_FILE" "$@"
    else
        exec sudo -H -u $SUDO_USER $OPENSSH_CMD $OARSH_OPENSSH_DEFAULT_OPTIONS -i "$OAR_JOB_KEY_FILE" -l $USER "$@"
    fi
    echo "[OARSH] Failed to connect using your job key: $OAR_JOB_KEY_FILE"
    exit 8
fi

# manage cpuset
OAR_CPUSET=$(get_current_cpuset)
if [ "$OAR_CPUSET" == "" ] || [ "$OAR_CPUSET" == "/" ]
then
    if [ -n "$OARSH_OARSTAT_CMD" ]
    then
        # dirty check to insure that OAR_JOB_ID is an integer
        if [ $OAR_JOB_ID -gt 0 ] 2>/dev/null
        then
            OAR_CPUSET=$($OARSH_OARSTAT_CMD -fj $OAR_JOB_ID | grep "^    cpuset_name = " | cut -d " " -f 7)
            if [ "$OAR_CPUSET" == "" ] 
            then
                echo "[OARSH] Cannot get the OAR job cpuset name." 1>&2
                echo "[OARSH] So you are not on a computing node and the job $OAR_JOB_ID does not exist." 1>&2
                exit 1
            else
                echo $OAR_CPUSET | grep $SUDO_USER"_" &> /dev/null
                if [ $? -ne 0 ]
                then
                    echo "[OARSH] Cannot get the OAR job cpuset name." 1>&2
                    echo "[OARSH] So you are not on a computing node and the job $OAR_JOB_ID is not yours." 1>&2
                    exit 2
                fi
            fi
        else
            echo "[OARSH] Cannot get the OAR job cpuset name." 1>&2
            echo "[OARSH] AND there is not a valid OAR_JOB_ID environment variable defined." 1>&2
            echo "[OARSH] With BASH you can use a syntax like (if your job is the 42):" 1>&2
            echo "[OARSH]     OAR_JOB_ID=42 oarsh node_name ..." 1>&2
            echo "[OARSH]   or" 1>&2
            echo "[OARSH]     export OAR_JOB_ID=42" 1>&2
            echo "[OARSH]     oarsh node_name ..." 1>&2
            exit 3
        fi
    else
        echo "[OARSH] Cannot get the OAR job cpuset name" 1>&2
        exit 4
    fi
fi

# connection using the job key file stored by oar on nodes upon submission 
OAR_JOB_KEY_FILE="$OAR_RUNTIME_DIRECTORY/$OAR_CPUSET.sshkey"
if [ -r $OAR_JOB_KEY_FILE ]
then
    exec $OPENSSH_CMD $OARSH_OPENSSH_DEFAULT_OPTIONS -i "$OAR_JOB_KEY_FILE" "$@"
    echo "[OARSH] Failed to connect using the job key"
    exit 5
fi 

# connection using cpuset
exec $OPENSSH_CMD $OARSH_OPENSSH_DEFAULT_OPTIONS -oSendEnv="OAR_CPUSET SUDO_USER" "$@"
echo "[OARSH] Exec with environments failed"
exit 6

