=head1 NAME

oarsub - OAR batch scheduler job submission command.

=head1 SYNOPSIS

B<oarsub> [OPTIONS] <job executable>

B<oarsub> [OPTIONS] -I

B<oarsub> [OPTIONS] -C <JOB ID>

=head1 DESCRIPTION

One uses B<oarsub> to submit a job to the B<OAR batch scheduler> managing the resources of a B<HPC Cluster>.
A job is defined by the description of a set of resources needed to execute a task and a script or executable to run.
A job may also be run interactively, and one may also use oarsub to connect to a previously submitted job.

The scheduler is in charge of providing a set of resources matching the oarsub command request. Once scheduled and then launched, a job consists of one process executed on the first node of the resources it was attibuted, with a set of environment variables that define the resources which are at the job disposal. That means that the job's executable is responsible for connecting those resources and dispatching the tasks.

=head1 OPTIONS

=over

=item B<-I, --Interactive>

Request an interactive job. Open a login shell on the first node of the reservation instead of running a script.

=item B<-C, --Connect> <OAR JOB ID>

Connect to a running job.

=item B<-l, --resource> <LIST>

Set the requested resources for the job. The different parameters are resource properties registered in OAR database, and `walltime' which specifies the duration before the job must be automatically terminated if still running. 
Walltime format is [hour:mn:sec|hour:mn|hour]. Ex: node=4/cpu=1,walltime=2:00:00

=item B<-S, --Scanscript>

Batch mode only: ask oarsub to scan the given script for OAR directives (#OAR -l ...)

=item B<-q, --queue> <QUEUE>

Set the the queue to submit the job to.

=item B<-p, --property> "<LIST>"

Add a list of constraints to properties for the job.
The format of a contraint is the one of a WHERE clause using the SQL syntax.

=item B<-r, --reservation>  <DATE>

Request that the job starts at a specified time. A job creation using this option is called a I<reservation> and instead of a I<submission>. 

=item B<--checkpoint> <DELAY>

Enable the checkpointing mechanism for the job.
A signal will be sent DELAY seconds before the walltime to the first processus of the job (on the first node of the resources).

=item B<--signal> <SIG>

Specify the signal to use when checkpointing. Default is I<SIGUSR2>.

=item B<-t, --type> <TYPE>

Specify a specific type (I<deploy>, I<besteffort>, I<cosystem>, I<checkpoint>, I<timesharing>)

=item B<-d, --directory> <DIR>

Specify the directory where to launch the command (default is current directory)

=item B<--project> <TXT>

Specify a name of a project the job belongs to.

=item B<-n, --name> <TXT>

Specify an arbitrary name for the job.

=item B<e, --env> <TXT>

Environment variables to set on the running proccess in the form "A=b C=d" (not implemented)

=item B<-a, --anterior> <OAR JOB ID>

Previously submitted job that this new job execution must depend on. The new job will only start upon the end the previous one.

=item B<--notify> <TXT>

Specify a notification method (mail or command to execute).
Ex: 
 --notify "mail:name@domain.com"
 --notify "exec:/path/to/script args"

=item B<--stdout> <FILE>

Specify the name of the standard output file.

=item B<--stderr> <FILE>

Specify the name of the error output file.

=item B<--resubmit> <OAR JOB ID>

Resubmit the given job as a new one.

=item B<--force-cpuset-name> <TXT>

Specify a cpuset name to use instead of the job id.
I<WARNING:> if several jobs have the same cpuset name then processes of a job could be killed when another one finishes on the same computer)

=item B<-k, --job-key-file> <FILE>

Use a job key. Parameter is the pathname to the secret key, public key is guessed (.pub is appended). If file does not already exist, generate it first.

=item B<--job-priv-key> <TXT>

Use a job key. Raw private key provided inline.

=item B<--job-pub-key> <TXT>

Use a job key. Raw public key provided inline.

=item B<--hold>

Set the job state into Hold instead of Waiting, so that it is not scheduled (you must run I<oarresume> to turn it into the Waiting state).

=item B<-s, --stagein> <DIR|TGZ>

Set the stagein directory or archive (Desktop Computing mode).

=item B<--stagein-md5sum> <MD5SUM>

Set the stagein file md5sum (Desktop Computing mode).

=item B<-D, --DUMPER>

Print result in Perl Data::Dumper format

=item B<-X, --XML>

Print result in XML format

=item B<-Y, --YAML>

Print result in YAML format

=item B<-h, --help>

Print this help message

=item B<-v, --version>

Print the version of OAR.

=back

=head1 ENVIRONMENT

=over

=item B<OAR_FILE_NODES> aka B<OAR_NODE_FILE> aka B<OAR_NODEFILE>

Pathname to the file containing the list of the nodes that are allocated to the job. 

=item B<OAR_JOB_NAME>

Name of the job as given using the B<-n> option.

=item B<OAR_JOB_ID> aka B<OAR_JOBID>

Id of the job. Each job get a unique job identifier. This identifier can be use to retrieve information about the job using B<oarstat>, or to connect to a running job using B<oarsub -C> or B<oarsh> for instance.
  
=item B<OAR_JOB_WALLTIME> resp. B<OAR_JOB_WALLTIME_SECONDS>

Walltime of the job in the hh:mm:ss format resp. in seconds.

=item B<OAR_RESOURCE_PROPERTIES_FILE>

Pathname to the file containing the list of all resources attributes for the job, and their value

=item B<OAR_PROJECT_NAME>

Name of the project the job is part of, as given using the B<--project> option.

=item B<OAR_STDOUT> and B<OAR_STDERR>

Pathname to the files storing the standart output and error of the job's executable when not running in interactive mode.

=item B<OAR_WORKING_DIRECTORY> aka B<OAR_WORKDIR> aka B<OAR_O_WORKDIR>

Working directory for the job. The job executable will be executed in this directory on the first node allocated to the job.

=back

=head1 SCRIPT

Script can contain the description of the job. Lines with options must begin by the key B<#OAR>. There are the same options as previous.

=head1 EXAMPLES

Job submission with arguments :

=over

=item oarsub -l /nodes=4 -I

=item oarsub -q default -l walltime=50:30:00,/nodes=10/cpu=3 -p "switch = 'sw1'" /home/users/toto/prog

=item oarsub -r "2004-04-27 11:00:00" -l /nodes=12/cpu=2

=item oarsub -C 154

=back

Script example:

=over

=item #OAR -l /nodes=4

=item #OAR -q long -l walltime=2:30

=item /home/users/toto/prog

=back

Submit the script :

=over

=item oarsub -S /home/users/toto/script

=back

=head1 SEE ALSO

oarsh(1), oardel(1), oarstat(1), oarnodes(1), oarhold(1), oarresume(1)

=head1 COPYRIGHTS

 Copyright © 2003 Laboratoire Id-Imag (http://www-id.imag.fr). This software is licensed under the GNU Library General Public License. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
