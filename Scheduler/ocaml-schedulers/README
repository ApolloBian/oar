
Simple schedulers in ocaml
---------------------------------

ocaml-schedulers have several goals

* provide scheduler examples
* provide schedulers with incremental features between each version
* test alternative design choice (by example use of resource intervals)
* provide scheduler in native binary code for performance concerns
* and to exercice author to code with a functional language (ocaml)

This work borrows lot of ideas and source codes from perl oar_2.x schedulers and (a large part of) moldable ocaml oar_1.6 scheduler (thanks respectively to Nicolas Capit and Lionel Eyraud for theirs codes). Sorry for the ugly ocaml code it's my first code.

Directories details
/schoolar:
Contains two classic schedulers : next-fit and first-fit. There are just examples. There are not suitable for oar.
Codes come from: http://books.google.fr/books?id=vpDmaVUC6QIC&pg=PA110&lpg=PA110&dq=first-fit+ocaml+next-fit&source=bl&ots=xXK6POXo7b&sig=Lp6sKyODT6afhlAQzZ-ZFfDd_Pg&hl=fr&sa=X&oi=book_result&resnum=1&ct=result#PPA115,M1

/test:
Some codes to simplify testing (up to now only sql requests to initialize database 2.2.x properly)
Hum will not support 2.2.x

/simple_cbf:
Contains a simple conservative backfilling scheduler. Can't be use directly in oar.

/simple_cbf_oar:
Uses simple_cbf scheduler and adds necessary oar database interactions to provide an usable simple scheduler

features:
 * conservative backfilling
 * respect of reservation
limitations:
 * all advances features are not implemented:
 - no resources properties matching
 - no besteffort
 - no hierarchies
 - no multiple resource type
 - no multiple resource requests ( + )
 - no time constant guards, timesharing, suspend/resume, job depencies, job arrays, desktop computing, job container, fairesharing...

/simple_cbf_mb:
Based on simple_cbf add job's resource constraints and filtering step to support resources matching 

/simple_cbf_mb_oar:
Uses simple_cbf_mb, and provides besteffort support (need deeper test) and resource matching 


/simple_cbf_mb_h:
Take simple_cbf_mb add hierarchy support, remove nb_res in several structure

/simple_cbf_mb_h_oar:
Uses simple_cbf_mb_h, usable with oar's DB to perform some simple test performance (not suitable for production use) 

/simple_cbf_mb_h_ts:
Based on simple_cbf_mb_h will provide container and timesharing features


/simple_cbf_mb_h_ts_oar:
Uses simple_cbf_mb_h_ts will be usable with oar's DB to perform some simple test performance (not suitable for production use)  
Next:
 * need to test multi-resource-type (since >= cbf_mb_h)
 * need to tes multi-request with non exclusive resource selection (since >= cbf_mb_h)
 * test on trunk DB version
 * Scalability performance testing
 * Add more features to reach perl scheduler's feature set :)
 * General and source documentation
 * Support of postgresql
 * Code restructuration (Interval in common)
 * compute mode support
 * timesharing, container, faireshare, ComputeMode, Postgresql...
 * suspended jobs (
 * add security_time_overhead (beetween jobs)
 * add always SCHEDULER_RESOURCES_ALWAYS_ASSIGNED_TYPE (is it really needed ?)

 * how to emulate resource order ?, need of specifique scheduler for besteffort or use perl scheduler for besteffort ???
 * Do we need global scheduling timeout ??? (at timeout expiration we can save succesfully scheduled job, can also be the way for incremental assignement saving...)

 * nb_asked_resource = 0 raise an error (>= cbf_mb_h) 
 * time_end_slot(n-1) = time_start_slot(n) for same resource must be time_start_slot(n) = time_end_slot(n-1) + 1 ! rajouter + 1 au walltime des jobs + une garde temporelle ?!! (can be address by the use of security_time_overhead ?) 

Done:
 * Preliminary performance comparaison (perl version timesharing only scheduler from oar-server_2.3.4-1_all.deb against cbf_mh_h). Perl scheduler doesn't seem to scale with number of resources)
 * modify itv_intersect in Interval / remove itv2str, itvs2str (>= cbf_mh_h)
 * multi-resource-type (since >= cbf_mh_h) (
 * multi-request with non exclusive resource selection (since >= cbf_mh_h)



Remarks:
 * 2.2.x series and previous are NOT SUPPORTED
 * Use of OUNIT for unit testing (cbf_mh_h and above)
