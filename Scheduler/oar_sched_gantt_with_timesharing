#!/usr/bin/perl
#-d:DProf

use strict;
use DBI();
use oar_iolib;
use Data::Dumper;
use oar_Judas qw(oar_debug oar_warn oar_error);
use oar_conflib qw(init_conf dump_conf get_conf is_conf);
use Gantt_2;
use Storable qw(dclone);
use Time::HiRes qw(gettimeofday);

my $initial_time = time();
my $timeout = 10;
init_conf($ENV{OARCONFFILE});
if (is_conf("SCHEDULER_TIMEOUT")){
    $timeout = get_conf("SCHEDULER_TIMEOUT");
}

# Constant duration time of a besteffort job
my $besteffort_duration = 5*60;

# $security_time_overhead is the security time (second) used to be sure there
# are no problem with overlaping jobs
my $security_time_overhead = 1;
if (is_conf("SCHEDULER_JOB_SECURITY_TIME")){
    $security_time_overhead = get_conf("SCHEDULER_JOB_SECURITY_TIME");
}

my $minimum_hole_time = 0;
if (is_conf("SCHEDULER_GANTT_HOLE_MINIMUM_TIME")){
    $minimum_hole_time = get_conf("SCHEDULER_GANTT_HOLE_MINIMUM_TIME");
}

my $Order_part = get_conf("SCHEDULER_RESOURCE_ORDER");

my $current_time ;

my $queue;
if (defined($ARGV[0]) && defined($ARGV[1]) && $ARGV[1] =~ m/\d+/m) {
    $queue = $ARGV[0];
    $current_time = $ARGV[1];
}else{
    oar_error("[oar_sched_gantt_with_timesharing] no queue specified on command line\n");
    exit(1);
}

# Init
my $base = iolib::connect();
my $base_ro = iolib::connect_ro();

oar_debug("[oar_sched_gantt_with_timesharing] Begining of Gantt scheduler on queue $queue at time $current_time\n");

my $timesharing_gantts;
# Create the Gantt Diagrams
#Init the gantt chart with all resources
my $vec = '';
my $max_resources = 1;
foreach my $r (iolib::list_resources($base)){
    vec($vec,$r->{resource_id},1) = 1;
    $max_resources = $r->{resource_id} if ($r->{resource_id} > $max_resources);
}
my $gantt = Gantt_2::new($max_resources, $minimum_hole_time);
Gantt_2::add_new_resources($gantt, $vec);

sub parse_timesharing($$$){
    my $str = shift;
    my $job_user = shift;
    my $job_name = shift;
            
    my $user = "*";
    my $name = "*";
    foreach my $s (split(',', $str)){
        if ($s =~ m/^\s*([\w\*]+)\s*$/m){
            if ($1 eq "user"){
                $user = $job_user;
            }elsif (($1 eq "name") and ($job_name ne "")){
                $name = $job_name;
            }
        }
    }

    return($user,$name);
}

# Take care of currently scheduled jobs (gantt in the database)
my %already_scheduled_jobs = iolib::get_gantt_scheduled_jobs($base);
foreach my $i (keys(%already_scheduled_jobs)){
    # Do not take care of besteffort jobs
    if (($already_scheduled_jobs{$i}->[2] ne "besteffort") or ($queue eq "besteffort")){
        my $user;
        my $name;
        my $types = iolib::get_current_job_types($base,$i);
        if (defined($types->{timesharing})){
            ($user, $name) = parse_timesharing($types->{timesharing}, $already_scheduled_jobs{$i}->[5], $already_scheduled_jobs{$i}->[6]);
            if (!defined($timesharing_gantts->{$user}->{$name})){
                $timesharing_gantts->{$user}->{$name} = dclone($gantt);
                oar_debug("[oar_sched_gantt_with_timesharing] Create new gantt for ($user, $name)\n");
            }
        }
        my $vec = '';
        foreach my $r (@{$already_scheduled_jobs{$i}->[3]}){
            vec($vec,$r,1) = 1;
        }
        #Fill all other gantts
        foreach my $u (keys(%{$timesharing_gantts})){
            foreach my $n (keys(%{$timesharing_gantts->{$u}})){
                if ((!defined($user)) or (!defined($name)) or (($u ne $user) or ($n ne $name))){
                    Gantt_2::set_occupation(  $timesharing_gantts->{$u}->{$n},
                                            iolib::sql_to_local($already_scheduled_jobs{$i}->[0]),
                                            iolib::sql_to_duration($already_scheduled_jobs{$i}->[1]) + $security_time_overhead,
                                            $vec
                                         );
                }
            }
        }
        Gantt_2::set_occupation(  $gantt,
                                  iolib::sql_to_local($already_scheduled_jobs{$i}->[0]),
                                  iolib::sql_to_duration($already_scheduled_jobs{$i}->[1]) + $security_time_overhead,
                                  $vec
                             );
    }
}

oar_debug("[oar_sched_gantt_with_timesharing] End gantt initialization\n");

# End of the initialisation
# Begining of the real scheduling

# Get list of Alive resources
my $alive_resources_vector = '';
foreach my $r (iolib::get_resources_in_state($base,"Alive")){
    vec($alive_resources_vector, $r->{resource_id}, 1) = 1;
}

my @jobs = iolib::get_jobs_to_schedule($base,$queue);
my $job_index = 0;
while (($job_index <= $#jobs) and ((time() - $initial_time) < $timeout)){
    my $j = $jobs[$job_index];
    $job_index ++;
    
    oar_debug("[oar_sched_gantt_with_timesharing] [$j->{job_id}] Start scheduling\n");
    
    my $scheduler_init_date = $current_time;
    # Search for dependencies
    my $skip_job = 0;
    foreach my $d (iolib::get_current_job_dependencies($base,$j->{job_id})){
        next if ($skip_job == 1);
        my $dep_job = iolib::get_job($base,$d);
        if (($dep_job->{state} ne "Terminated")){
            my @date_tmp = iolib::get_gantt_job_start_time($base,$d);
            if (defined($date_tmp[0])){
                my $mold_dep = iolib::get_current_moldable_job($base,$date_tmp[1]);
                my $sched_tmp = iolib::sql_to_local($date_tmp[0]) + iolib::sql_to_duration($mold_dep->{moldable_walltime});
                if ($scheduler_init_date < $sched_tmp){
                    $scheduler_init_date = $sched_tmp;
                }
            }else{
                my $message = "Cannot determine scheduling time due to dependency with the job $d";
                iolib::set_job_message($base,$j->{job_id},$message);
                oar_debug("[oar_sched_gantt_with_timesharing] [$j->{job_id}] $message\n");
                $skip_job = 1;
                next;
            }
        }
    }
    next if ($skip_job == 1);
     
    my $gantt_to_use = $gantt;
    my $types = iolib::get_current_job_types($base,$j->{job_id});
    if (defined($types->{timesharing})){
        my ($user, $name) = parse_timesharing($types->{timesharing}, $j->{job_user}, $j->{job_name});
        if (!defined($timesharing_gantts->{$user}->{$name})){
            $timesharing_gantts->{$user}->{$name} = dclone($gantt);
            oar_debug("[oar_sched_gantt_with_timesharing] Create new gantt in phase II for ($user, $name)\n");
        }
        $gantt_to_use = $timesharing_gantts->{$user}->{$name};
        oar_debug("[oar_sched_gantt_with_timesharing] Use gantt for ($user,$name)\n");
    }
#    oar_debug("[oar_sched_gantt_with_timesharing] Use gantt :\n".Gantt::pretty_print($gantt_to_use)."\n");

    my $job_properties = "TRUE";
    if ((defined($j->{properties})) and ($j->{properties} ne "")){
        $job_properties = $j->{properties};
    }
    
    # Choose the moldable job to schedule
    my @moldable_results;
    my $job_descriptions = iolib::get_resources_data_structure_current_job($base,$j->{job_id});
    foreach my $moldable (@{$job_descriptions}){
    #my $moldable = $job_descriptions->[0];
    #print(Dumper($moldable));
        my $duration;
        if ($queue eq "besteffort"){
            $duration = $besteffort_duration;
        }else{
            $duration = iolib::sql_to_duration($moldable->[1]) + $security_time_overhead;
        }
    
        my $resource_id_used_list_vector = '';
        my @tree_list;
        foreach my $m (@{$moldable->[0]}){
            my $tmp_properties = "TRUE";
            if ((defined($m->{property})) and ($m->{property} ne "")){
                $tmp_properties = $m->{property};
            }
            my $tmp_tree = iolib::get_possible_wanted_resources($base_ro,$alive_resources_vector,$resource_id_used_list_vector,"$job_properties AND $tmp_properties", $m->{resources}, $Order_part);
            push(@tree_list, $tmp_tree);
            my @leafs = oar_resource_tree::get_tree_leafs($tmp_tree);
            foreach my $l (@leafs){
                vec($resource_id_used_list_vector, oar_resource_tree::get_current_resource_value($l), 1) = 1;
            }
        }
        my @hole = Gantt_2::find_first_hole($gantt_to_use, $scheduler_init_date, $duration, \@tree_list);
        
#        print("[GANTT] 10 ".gettimeofday."\n");
        my @res_trees;
        my @resources;
        foreach my $t (@{$hole[1]}){
#        print("[GANTT] 11 ".gettimeofday."\n");
            my $minimal_tree = oar_resource_tree::delete_unnecessary_subtrees($t);
#        print("[GANTT] 12 ".gettimeofday."\n");
            push(@res_trees, $minimal_tree);
            foreach my $r (oar_resource_tree::get_tree_leafs($minimal_tree)){
                push(@resources, oar_resource_tree::get_current_resource_value($r));
            }
#        print("[GANTT] 13 ".gettimeofday."\n");
        }
        push(@moldable_results, {
                                    resources => \@resources,
                                    start_date => $hole[0],
                                    duration => $duration,
                                    moldable_id => $moldable->[2]
                                });
    }

    # Choose moldable job which will finish the first
    my $index_to_choose = -1;
    my $best_stop_time;
#        print("[GANTT] 14 ".gettimeofday."\n");
    for (my $i=0; $i <= $#moldable_results; $i++){
        #my @tmp_array = @{$moldable_results[$i]->{resources}};
        if ($#{@{$moldable_results[$i]->{resources}}} >= 0){
            my $tmp_stop_date = $moldable_results[$i]->{start_date} + $moldable_results[$i]->{duration};
            if ((!defined($best_stop_time)) or ($best_stop_time > $tmp_stop_date)){
                $best_stop_time = $tmp_stop_date;
                $index_to_choose = $i;
            }
        }
    }
    if ($index_to_choose >= 0){
        # We can schedule the job
#        print("[GANTT] 15 ".gettimeofday."\n");
        my $vec = '';
        foreach my $r (@{$moldable_results[$index_to_choose]->{resources}}){
            vec($vec, $r, 1) = 1;
        }
        Gantt_2::set_occupation(    $gantt,
                                    $moldable_results[$index_to_choose]->{start_date},
                                    $moldable_results[$index_to_choose]->{duration},
                                    $vec
                                );
        #Fill all other gantts
        foreach my $u (keys(%{$timesharing_gantts})){
#        print("[GANTT] 17 ".gettimeofday."\n");
            foreach my $n (keys(%{$timesharing_gantts->{$u}})){
                if (($gantt_to_use != $timesharing_gantts->{$u}->{$n})){
                    Gantt_2::set_occupation(  $timesharing_gantts->{$u}->{$n},
                                              $moldable_results[$index_to_choose]->{start_date},
                                              $moldable_results[$index_to_choose]->{duration},
                                              $vec
                                         );
                }
            }
        }
        
        #update database
        my ($year,$mon,$day,$hour,$min,$sec) = iolib::local_to_ymdhms($moldable_results[$index_to_choose]->{start_date});
        iolib::add_gantt_scheduled_jobs($base,$moldable_results[$index_to_choose]->{moldable_id},"$year-$mon-$day $hour:$min:$sec",$moldable_results[$index_to_choose]->{resources});
    }else{
        my $message = "Cannot find enough resources which fite for the job $j->{job_id}";
        iolib::set_job_message($base,$j->{job_id},$message);
        oar_debug("[oar_sched_gantt_with_timesharing] [$j->{job_id}] $message\n");
    }
#        print("[GANTT] 18 ".gettimeofday."\n");
    oar_debug("[oar_sched_gantt_with_timesharing] [$j->{job_id}] End scheduling\n");
}

iolib::disconnect($base);
iolib::disconnect($base_ro);

if ($job_index <= $#jobs){
    oar_debug("[oar_sched_gantt_with_timesharing] I am not able to schedule all waiting jobs in the specified time : $timeout s\n");
}

oar_debug("[oar_sched_gantt_with_timesharing] End of scheduler for queue $queue\n");

#print(Gantt_2::pretty_print($gantt)."\n");
