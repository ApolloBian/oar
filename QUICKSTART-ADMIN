Installing OAR (almost) without pain
====================================

There are currently 3 methods to install OAR.

* with debian packages
* with rpm packages
* with the sources

The first thing you have to know is about the OAR architecture.

A common OAR installation is composed of: 

* the OAR server
* the DataBase server
* the job submission frontale
* several machines that are computing nodes


Installation from debian packages
---------------------------------

If you want to install oar from the debian packages, you will have to install the 
oar-server package on the OAR server, the oar-user package on the submission frontale
and the oar-node package on the computing nodes.

* add to your apt.conf file the line given in http://oar.imag.fr/downloads.html depending on which release you want to install.
* install the oar-* packages on the different machines like explained above.
* install postgresql or mysql-server depending which database you want to use.
* add::
  
    environment="OAR_KEY=1"
 
 at the beginning of the public key in the 
 **~oar/.ssh/authorized_keys** file.



Installation from rpm packages
------------------------------

To complete...



Installation from the sources
-----------------------------

Prerequisites: Install the libs
_______________________________

First of all you have to install the following packages:

* Perl
* Perl-base
* openssh (server and client) version >= 3.9
* Perl-Mysql
* Perl-DBI
* MySQL
* libmysql
* perl-suid

You also have to install a >= 2.6 kernel in order to use cpuset feature.

1°) Pave the way for install
____________________________

* add a user named "oar" in the group "oar"
* create a set of ssh keys for the user "oar" with ssh-keygen 
  (for instance 'id_dsa.pub' and 'id_dsa')
* copy these keys in the ".ssh" folder of the user "oar"
* append the contents of 'id_dsa.pub' to the file **~oar/.ssh/authorized_keys**
* in **~/.ssh/config** (create the file if it doesn't exists) add the lines::

    Host *
        ForwardX11 no
        StrictHostKeyChecking no
        PasswordAuthentication no
        AddressFamily inet

* add in your ssh server config file::

    AcceptEnv OAR_CPUSET OAR_JOB_USER
    PermitUserEnvironment yes
    UseLogin no
    AllowUsers oar

* add::
  
    environment="OAR_KEY=1"
 
 at the beginning of the public key in the 
 **~oar/.ssh/authorized_keys** file.
  
* add in your **~oar/.bashrc** file::

    export PATH=/usr/local/oar/oardodo:$PATH
    
2°) Install the OAR modules
___________________________

Just go into the OAR source directory and as root type::

  make server-install user-install node-install
  
Initiate the database
---------------------

As root run oar_mysql_db_init or oar_psql_db_init depending your DataBase type.


Configuration file
------------------

To configure your oar server, edit its config file
**/etc/oar/oar.conf**. Take a look at the different sections and customize it if you want to.


Cpusets
-------

In order to use this feature, you have to uncomment the line with the 
**JOB_RESOURCE_MANAGER_PROPERTY_DB_FIELD** field in your oar.conf file.
Then, for each computing resource in your database, set the cpuset field to the 
cpu id you want your resource to be restricted on.



Adding resources to the system
------------------------------

If you want to automatically detect and insert corresponding resources into OAR then you just need to launch::

    oar_resources_init

Otherwise you can use the oaradmin command. This tool is available to help you
in the administrative tasks of a OAR server.
You can install it with ::

  make tools-install

or by installing the oar-admin package.
Its dependencies are: 

* ruby1.8 (or greater)
* libdbi-ruby 
* libdbd-mysql-ruby or libdbd-pg-ruby
* libyaml-ruby

Then, you can launch as root, a command like the following::

  oaradmin resources -a /nodes=mycluster{%2d12}.local/cpu={4}/core={2} -c

This will create a cluster of 12 nodes called **mycluster01** to **mycluster12** with 4 cpus per node and 2 cores per cpu.

A script is also available to help detecting resources on a local machine:
**/usr/local/oar/detect_resources**. You can use it to have an idea of how
works oarnodesetting. 

You may also type **oarnodesetting --help** as root for more options.

At the end, if you have installed OAR by the sources, you will have to launch as oar the Almighty daemon (the oar server).