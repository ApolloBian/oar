FAQ
===

User
----

How can I submit a moldable job?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You just have to use several "-l" oarsub_ option(one for each moldable
description). By default the OAR scheduler will launch the moldable job which
will end first.

So you can see some free resources but the scheduler can decide to start your
job later because they will have more free resources and the job walltime will
be smaller.

How can I submit a job with a non uniform description?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Example:
::
    
    oarsub -I -l '{switch = "sw1" or switch = "sw5"}/switch=1+/node=1'

This example asks OAR to reserve all resources from the switch sw1 or the
switch sw2 **and** a node on another switch.

You can see the "+" syntax as a sub-reservation directive.

Can I perform a fix scheduled reservation and then launch several jobs in it?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Yes. You have to use the OAR scheduler "timesharing" feature.
To use it, the reservation and your further jobs must be of the type
timesharing (only for you).

Example:

  1. Make your reservation:
     ::
        
        oarsub -r "2006-09-12 8:00:00" -l /switch=1 -t 'timesharing=user,*'

     This command asks all resources from one switch at the given date for the
     default walltime. It alsa specifies that this job can be shared with
     himself and without a constraint on the job name.

  2. Once your reservation has begun then you can launch:
     ::

        oarsub -I -l /node=2,walltime=0:50:00 -p 'switch = "nom_du_switch_schedule"'\
        -t 'timesharing=user,*'

     So this job will be scheduled on nodes assigned from the previous reservation.

The "timesharing" oarsub_ command possibilities are enumerated in Timesharing_.

How can a checkpointable job be resubmitted automatically?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You have to specify that your job is *idempotent*. So, after a successful
checkpoint, if the job is resubmitted then all will go right and there will have
no problem (like file creation, deletion, ...).

Example:
::
    
    oarsub -k 600 --signal 2 -t idempotent /path/to/prog

So this job will send a signal *SIGINT* (see *man kill* to know signal
numbers) 10 minutes before the walltime ends. Then if everything goes
well it will be resubmitted.

How to submit a non disturbing job for other users?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use the *besteffort* job type. Thus your job will be launched only
if there is a hole and will be deleted if another job wants its resources.

Example:
::

    oarsub -t besteffort /path/to/prog

How can I get the exit code of my program in a PASSIVE job?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You have to manage this feature in your script.
For example you can add this line just after the call of your program::

    echo "Exit code = $?"

Then you will be able to see the exit code in the STDOUT file of your OAR job.

Administrator
-------------

How can I manage scheduling queues?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

::

    oarnotify

How can I write my own scheduler?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. include:: Scheduler/README

What is the syntax of this documentation?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We are using the RST format from the Docutils project. This syntax is easily
readable and can be converted into HTML, LaTex or XML.

You can find basic informations on http://docutils.sourceforge.net/docs/user/rst/quickref.html

