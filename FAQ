FAQ
===

User
----

How can I submit a moldable job?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You just have to use several "-l" oarsub_ option(one for each moldable
description). By default the OAR scheduler will launch the moldable job which
will end first.

So you can see some free resources but the scheduler can decide to start your
job later because they will have more free resources and the job walltime will
be smaller.

How can I submit a job with a non uniform description?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Example:
::
    
    oarsub -I -l '{switch = "sw1" or switch = "sw5"}/switch=1+/node=1'

This example asks OAR to reserve all resources from the switch sw1 or the
switch sw2 **and** a node on another switch.

You can see the "+" syntax as a sub-reservation directive.

Can I perform a fix scheduled reservation and then launch several jobs in it?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Yes. You have to use the OAR scheduler "timesharing" feature.
To use it, the reservation and your further jobs must be of the type
timesharing (only for you).

Example:

  1. Make your reservation:
     ::
        
        oarsub -r "2006-09-12 8:00:00" -l /switch=1 -t 'timesharing=user,*'

     This command asks all resources from one switch at the given date for the
     default walltime. It also specifies that this job can be shared with
     himself and without a constraint on the job name.

  2. Once your reservation has begun then you can launch:
     ::

        oarsub -I -l /node=2,walltime=0:50:00 -p 'switch = "nom_du_switch_schedule"'\
        -t 'timesharing=user,*'

     So this job will be scheduled on nodes assigned from the previous reservation.

The "timesharing" oarsub_ command possibilities are enumerated in Timesharing_.

How can a checkpointable job be resubmitted automatically?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You have to specify that your job is *idempotent*. So, after a successful
checkpoint, if the job is resubmitted then all will go right and there will have
no problem (like file creation, deletion, ...).

Example:
::
    
    oarsub -k 600 --signal 2 -t idempotent /path/to/prog

So this job will send a signal *SIGINT* (see *man kill* to know signal
numbers) 10 minutes before the walltime ends. Then if everything goes
well it will be resubmitted.

How to submit a non disturbing job for other users?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use the *besteffort* job type. Thus your job will be launched only
if there is a hole and will be deleted if another job wants its resources.

Example:
::

    oarsub -t besteffort /path/to/prog

Administrator
-------------

How to manage start/stop of the nodes?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
You have to add a script in /etc/init.d which switches resources of the node
into the "Alive" or "Absent" state.
So when this script is called at boot time, it will change the state into
"Alive". And when it is called at halt time, it will change into "Absent".

There two ways to perform this action:

 1. Install OAR "oar-libs" part on all nodes. Thus you will be able to launch
    the command oarnodesetting_ (be careful to right configure "oar.conf" with
    database login and password AND to allow network connections on this
    database).
    So you can execute::

        oarnodesetting -s Alive -h node_hostname
            or
        oarnodesetting -s Absent -h node_hostname

 2. You do not want to install anything else on each node. So you have to
    enable oar user to connect to the server via ssh (for security you
    can use another SSH key with restrictions on the command that oar can
    launch with this one). Thus you will have in you init script
    something like::

        sudo -u oar ssh oar-server "oarnodesetting -s Alive -h node_hostname"
            or
        sudo -u oar ssh oar-server "oarnodesetting -s Absent -h node_hostname"

    In this case, further OAR software upgrade will be more painless.

How can I manage scheduling queues?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
see oarnotify_.

How can I handle licence tokens?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
OAR does not manage resources with an empty "network_address". So you can
define resources that are not linked with a real node.

So the steps to configure OAR with the possibility to reserve licences (or
whatever you want that are other notions):

 1. Add a new field in the table resources_ to specify the licence name.
    ::

        oarproperty -a licence -c

 2. Add your licence name resources with oarnodesetting_.
    ::

        oarnodesetting -a -h "" -p type=mathlab -p licence=l1
        oarnodesetting -a -h "" -p type=mathlab -p licence=l2
        oarnodesetting -a -h "" -p type=fluent -p licence=l1
        ...

 3. Now you have to write an admission rule to force oarsub_ "-l" option on
    resources of the type "default" (node resources) if there is no other
    specifications. 
    ::

        INSERT INTO admission_rules (rule) VALUES ('
        foreach my $mold (@{$ref_resource_list}){
            foreach my $r (@{$mold->[0]}){
                my $prop = $r->{property};
                if (($prop !~ /[\\s\\(]type[\\s=]/) and ($prop !~ /^type[\\s=]/)){
                    if (!defined($prop)){
                        $r->{property} = "type = \\\'default\\\'";
                    }else{
                        $r->{property} = "($r->{property}) AND type = \\\'default\\\'";
                    }
                }
            }
        }
        print("[ADMISSION RULE] Modify resource description with type constraints\\n");
        ');

After this configuration, users can perform submissions like
::

    oarsub -I -l "/switch=2/nodes=10+{type = 'mathlab'}/licence=20"

So users ask OAR to give them some other resource types but nothing block
their program to take more licences than they asked.
You can resolve this problem with the SERVER_SCRIPT_EXEC_FILE_ configuration.
In these files you have to bind OAR allocated resources to the licence servers
to restrict user consumptions to what they asked. This is very dependant of
the licence management.

How can I write my own scheduler?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. include:: Scheduler/README

Does OAR handle summer and winter hours?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
No.

If you change the server time when OAR is executing jobs then their stop date
will be wrong. So users have to be warned about this feature and database logs
are not exact for these jobs.

What is the syntax of this documentation?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We are using the RST format from the `Docutils
<http://docutils.sourceforge.net/>`_ project. This syntax is easily readable
and can be converted into HTML, LaTex or XML.

You can find basic informations on
http://docutils.sourceforge.net/docs/user/rst/quickref.html

