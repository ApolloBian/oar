#!/usr/bin/perl
# $Id: NodeChangeState,v 1.11 2005/10/03 14:36:36 capitn Exp $
#Almighty module which changes node state

use English;
use oar_iolib;
use Data::Dumper;
use oar_Judas qw(oar_debug oar_warn oar_error);
use IO::Socket::INET;
use strict;

my $Exit_code = 0;

my $base = iolib::connect();

iolib::lock_table($base,["resources","assigned_resources","jobs","resource_state_logs","event_logs","event_log_hostnames","frag_jobs","moldable_job_descriptions"]);

# Check event logs
my @events_to_check = iolib::get_to_check_events($base);
foreach my $i (@events_to_check){
    oar_debug("[NodeChangeState] Check event for the job $i->{job_id} with type $i->{type}\n");
    if (($i->{type} eq "PING_CHECKER_NODE_SUSPECTED") ||
        ($i->{type} eq "PROLOGUE_ERROR") ||
        ($i->{type} eq "EPILOGUE_ERROR") ||
        ($i->{type} eq "CANNOT_WRITE_NODE_FILE") ||
        ($i->{type} eq "CANNOT_WRITE_PID_FILE") ||
        ($i->{type} eq "USER_SHELL") ||
        ($i->{type} eq "EXTERMINATE_JOB") ||
        ($i->{type} eq "CANNOT_CREATE_TMP_DIRECTORY") ||
        ($i->{type} eq "LAUNCHING_OAREXEC_TIMEOUT") ||
        ($i->{type} eq "EXIT_VALUE_OAREXEC")
       ){
        my @hosts;
        my $finaud_tag;
        # Restrict Suspected state to the first node (node really connected with OAR) for some event types
        if (($i->{type} eq "PING_CHECKER_NODE_SUSPECTED")){
            @hosts = iolib::get_hostname_event($base,$i->{event_id});
            $finaud_tag = "YES";
        }else{
            my $job = iolib::get_job($base,$i->{job_id});
            @hosts = iolib::get_job_host_log($base,$job->{assigned_moldable_job});
            $finaud_tag = "NO";
            if (($i->{type} ne "EXTERMINATE_JOB")){
                @hosts = ($hosts[0]);
            }
        }

        foreach my $j (@hosts){
            my @free_resources = iolib::get_current_free_resources_of_node($base, $j);
            if ($#free_resources >= 0){
                oar_warn("[NodeChangeState] There was an error ($i->{type}) on the node $j SO we are suspecting resource(s) : @free_resources\n");
                foreach my $r (@free_resources){
                    iolib::set_node_state($base,$j,"Suspected",$finaud_tag);
                    $Exit_code = 1;
                }
            }else{
                oar_warn("[NodeChangeState] There was an error ($i->{type}) on the node $j BUT we cannot Suspect this node because all resources are busy\n");
            }
        }
    }
    iolib::check_event($base, $i->{type}, $i->{job_id});
}


# Treate nextState field
my %resources_to_change = iolib::get_resources_change_state($base);

#A Term command must be added in the Almighty
oar_debug("[NodeChangeState] number of resources to change state = ".keys(%resources_to_change)."\n");
if (keys(%resources_to_change) > 0){
    $Exit_code = 1;
}

foreach my $i (keys(%resources_to_change)){
    my $resource_info = iolib::get_resource_info($base,$i);
    if ($resource_info->{state} ne $resources_to_change{$i}){
        if ($resource_info->{next_finaud_decision} eq "YES"){
            oar_warn("[NodeChangeState] Finaud is automatically changing the state of the resource $i into $resources_to_change{$i}\n");
        }else{
            oar_warn("[NodeChangeState] $i --> $resources_to_change{$i}\n");
        }

        iolib::set_resource_state($base,$i,$resources_to_change{$i},$resource_info->{next_finaud_decision});
        iolib::set_resource_nextState($base,$i,'UnChanged');

        if (($resources_to_change{$i} eq 'Dead') || ($resources_to_change{$i} eq 'Absent')){
            oar_debug("[NodeChangeState] Check jobs to delete on $i :\n");
            my @jobs = iolib::get_resource_job($base,$i);
            foreach my $j (@jobs){
                oar_debug("[NodeChangeState]\tThe job $j is fragging.\n");
                iolib::frag_job($base,$j);
                # A Leon must be run
                $Exit_code = 2;
            }
            oar_debug("[NodeChangeState] Check done\n");
        }
    }else{
        oar_warn("[NodeChangeState] $i is already in the $resources_to_change{$i} state\n");
        iolib::set_resource_nextState($base,$i,'UnChanged');
    }
}
iolib::unlock_table($base);
iolib::disconnect($base);

exit($Exit_code);
