#!/usr/bin/perl
# $Id: oarstat,v 1.27 2005/06/01 16:20:42 capitn Exp $
# print active job properties

use strict;
use warnings;
use Data::Dumper;
use oar_iolib;
use Getopt::Long;
use oarversion;

#Try to load XML module
my $XML_enabled = 1;
unless (eval "use XML::Simple qw(XMLout);1"){
    $XML_enabled = 0;
}

#Try to load YAML module
my $YAML_enabled = 1;
unless (eval "use YAML;1"){
    $YAML_enabled = 0;
}

# suitable Data::Dumper configuration for serialization
$Data::Dumper::Purity = 1;
$Data::Dumper::Terse = 1;
$Data::Dumper::Indent = 0;
$Data::Dumper::Deepcopy = 1;

my $Printed_jobs = 0;

sub print_job($$);
sub get_history($$$);

Getopt::Long::Configure ("gnu_getopt");
my $sos;
my @job_ids;
my $full_view;
my $gantt_query;
my $XML_mode;
my $YAML_mode;
my $DUMPER_mode;
my $Version;
my $Old;
GetOptions ("help|h" => \$sos,
            "job|j=i"  => \@job_ids,
            "full|f"  => \$full_view,
            "gantt|g=s"   => \$gantt_query,
            "XML|X" => \$XML_mode,
            "YAML|Y" => \$YAML_mode,
            "DUMPER|D" => \$DUMPER_mode,
            "backward_compatible" => \$Old,
            "version|v" => \$Version
           );

if ($sos){
    print <<EOS;
Usage: $0 [[-h] | [-j job_id][-f] | [-g "date,date"]] [-X | -Y | -D] [-v]
Display job informations
Options:
  -h, --help        show this help screen
  -j, --job         show informations only for the specified job
  -f, --full        show full informations
  -g, --gantt       show job informations between two dates like "2006-03-30 13:49:27, 2006-04-30 13:49:27"
  -D, --DUMPER      print result in DUMPER format
  -X, --XML         print result in XML format
  -Y, --YAML        print result in YAML format
      --backward_compatible print informations of the form of 1.* OAR version
  -v, --version     print OAR version number
EOS
    exit(0);
}

if (defined($Version)){
    print("OAR version : ".oarversion::get_version()."\n");
    exit(0);
}

my $base = iolib::connect_ro();

my @jobs;

if (!defined($gantt_query)){
    if ($#job_ids < 0){
        push(@jobs, iolib::get_jobs_in_state($base, "Finishing"));
        push(@jobs, iolib::get_jobs_in_state($base, "Running"));
        push(@jobs, iolib::get_jobs_in_state($base, "Launching"));
        push(@jobs, iolib::get_jobs_in_state($base, "toLaunch"));
        push(@jobs, iolib::get_jobs_in_state($base, "Waiting"));
        push(@jobs, iolib::get_jobs_in_state($base, "toAckReservation"));
        push(@jobs, iolib::get_jobs_in_state($base, "Hold"));
    }elsif($#job_ids >= 0){
        foreach my $j (@job_ids){
            push(@jobs, iolib::get_job($base,$j));
        }
    }
    foreach my $g (@jobs) {
        print_job($base,$g);
    }
}elsif ($gantt_query =~ m/\s*(\d{4}\-\d{1,2}\-\d{1,2})\s+(\d{1,2}:\d{1,2}:\d{1,2})\s*,\s*(\d{4}\-\d{1,2}\-\d{1,2})\s+(\d{1,2}:\d{1,2}:\d{1,2})\s*/m){
    my $hist = get_history($base, "$1 $2", "$3 $4");
    if (defined($DUMPER_mode)){
        print(Dumper($hist));
    }elsif(defined($XML_mode)){
        if ($XML_enabled == 1){
        print(XMLout($hist));
        }else{
            warn("[ERROR] Cannot load XML module.\n");
            return(5);
        }
    }elsif(defined($YAML_mode)){
        if ($YAML_enabled == 1){
            print(YAML::Dump($hist));
        }else{
            warn("[ERROR] Cannot load YAML module.\n");
            return(6);
        }
    }else{
        $Data::Dumper::Purity = 1;
        $Data::Dumper::Terse = 1;
        $Data::Dumper::Indent = 1;
        $Data::Dumper::Deepcopy = 0;
        print(Dumper($hist));
    }
}else{
    print("/!\\ Bad syntax with '-g' option\n");
    iolib::disconnect($base);
    exit(1);
}


iolib::disconnect($base);

exit(0);

sub print_job($$){
    my $dbh = shift;
    my $job_info = shift;

    return if (!defined($job_info));
    
    my @nodes;
    my $mold;
    my @date_tmp;
    my @job_events;
    my %data_to_display;

    my $resources_string = "";
    if (defined($full_view) or defined($Old)){
        @date_tmp = iolib::get_gantt_job_start_time_visu($dbh,$job_info->{job_id});
        @job_events = iolib::get_job_events($dbh,$job_info->{job_id});
   
        #Get the job resource description to print -l option
        my $job_descriptions = iolib::get_resources_data_structure_current_job($dbh,$job_info->{job_id});
        foreach my $moldable (@{$job_descriptions}){
            my $tmp_str = "";
            foreach my $group (@{$moldable->[0]}){
                if ($tmp_str ne ""){
                    # add a new group
                    $tmp_str .= "+";
                }else{
                    # first group
                    $tmp_str .= "-l '";
                }
                if ((defined($group->{property})) and ($group->{property} ne "")){
                    $tmp_str .= "{$group->{property}}";
                }
                foreach my $resource (@{$group->{resources}}){
                    my $tmp_val = $resource->{value};
                    if ($tmp_val == -1){
                        $tmp_val = "ALL";
                    }elsif ($tmp_val == -2){
                        $tmp_val = "BEST";
                    }
                    $tmp_str .= "/$resource->{resource}=$tmp_val";
                }
            }
            $tmp_str .= ",walltime=$moldable->[1]' ";
            $resources_string .= $tmp_str;
        }
        
        if ($job_info->{assigned_moldable_job} ne ""){
            @nodes = iolib::get_job_resources($dbh,$job_info->{assigned_moldable_job});
            $mold = iolib::get_moldable_job($dbh,$job_info->{assigned_moldable_job});
        }
    
        %data_to_display = (
            Job_Id => $job_info->{job_id},
            name => $job_info->{job_name},
            owner => $job_info->{job_user},
            state => $job_info->{state},
            assigned_resources => \@nodes,
            queue => $job_info->{queue_name},
            command => $job_info->{command},
            launchingDirectory => $job_info->{launching_directory},
            jobType => $job_info->{job_type},
            properties => $job_info->{properties},
            reservation => $job_info->{reservation},
            walltime => $mold->{moldable_walltime},
            submissionTime => $job_info->{submission_time},
            startTime => $job_info->{start_time},
            message => $job_info->{message},
            scheduledStart => $date_tmp[0],
            resubmit_job_id => $job_info->{resubmit_job_id},
            events => \@job_events,
            wanted_resources => $resources_string
        );
    }else{
        %data_to_display = (
            Job_Id => $job_info->{job_id},
            name => $job_info->{job_name},
            owner => $job_info->{job_user},
            state => $job_info->{state},
            queue => $job_info->{queue_name},
            command => $job_info->{command},
            launchingDirectory => $job_info->{launching_directory},
            jobType => $job_info->{job_type},
            properties => $job_info->{properties},
            reservation => $job_info->{reservation},
            submissionTime => $job_info->{submission_time},
            startTime => $job_info->{start_time},
            message => $job_info->{message},
            resubmit_job_id => $job_info->{resubmit_job_id},
        );
    }
 
    my %hashestat = (
                'Waiting' => 'W',
                'toLaunch' => 'L',
                'Launching' => 'L',
                'Hold'        => 'H',
                'Running' => 'R',
                'Terminated' => 'T',
                'Error' => 'E',
                'toError' => 'E',
                'Finishing' => 'F',
                'toAckReservation' => 'W'
    );
    
    if (defined($DUMPER_mode)){
        print(Dumper(\%data_to_display));
    }elsif(defined($XML_mode)){
        if ($XML_enabled == 1){
        print(XMLout(\%data_to_display));
        }else{
            warn("[ERROR] Cannot load XML module.\n");
            return(5);
        }
    }elsif(defined($YAML_mode)){
        if ($YAML_enabled == 1){
            print(YAML::Dump(\%data_to_display));
        }else{
            warn("[ERROR] Cannot load YAML module.\n");
            return(6);
        }
    }else{
        if (defined($Old)){
            print("Job Id: $job_info->{job_id}.oar\n");
            $job_info->{job_name} = '' if (!defined($job_info->{job_name}));
            print("    Job_Name = $job_info->{job_name}\n");
            print("    Job_Owner = $job_info->{job_user}\n");
            print("    job_state = $hashestat{$job_info->{state}}\n");
            print("    comment = $job_info->{message}\n");
            print("    wanted_resources = $resources_string\n");
            print("    queue = $job_info->{queue_name}\n");
            $job_info->{command} = '' if (!defined($job_info->{command}));
            print("    command = $job_info->{command}\n");
            print("    launchingDirectory = $job_info->{launching_directory}\n");
            print("    jobType = $job_info->{job_type}\n");
            print("    properties = $job_info->{properties}\n");
            print("    reservation = $job_info->{reservation}\n");
            $mold->{moldable_walltime} = '' if (!defined($mold->{moldable_walltime}));
            print("    walltime = $mold->{moldable_walltime}\n");
            print("    submissionTime = $job_info->{submission_time}\n");
            print("    startTime = $job_info->{start_time}\n");
            print("    stopTime = $job_info->{stop_time}\n");
            $date_tmp[0] = "no prediction" if (!defined($date_tmp[0]));
            print("    scheduledStart = $date_tmp[0]\n");
            print("    assigned_resources = ".join("+",@nodes)."\n");
            print("    nbNodes = 0\n");
            print("    weight = 0\n");
            print("\n");
        }elsif (defined($full_view)){
            print("Job_Id: $job_info->{job_id}\n");
            $job_info->{job_name} = '' if (!defined($job_info->{job_name}));
            print("    name = $job_info->{job_name}\n");
            print("    owner = $job_info->{job_user}\n");
            print("    state = $job_info->{state}\n");
            print("    wanted_resources = $resources_string\n");
            print("    assigned_resources = ".join("+",@nodes)."\n");
            print("    queue = $job_info->{queue_name}\n");
            $job_info->{command} = '' if (!defined($job_info->{command}));
            print("    command = $job_info->{command}\n");
            print("    launchingDirectory = $job_info->{launching_directory}\n");
            print("    jobType = $job_info->{job_type}\n");
            print("    properties = $job_info->{properties}\n");
            print("    reservation = $job_info->{reservation}\n");
            $mold->{moldable_walltime} = '' if (!defined($mold->{moldable_walltime}));
            print("    walltime = $mold->{moldable_walltime}\n");
            print("    submissionTime = $job_info->{submission_time}\n");
            print("    startTime = $job_info->{start_time}\n");
            print("    stopTime = $job_info->{stop_time}\n");
            print("    message = $job_info->{message}\n");
            $date_tmp[0] = "no prediction" if (!defined($date_tmp[0]));
            print("    scheduledStart = $date_tmp[0]\n");
            print("    resubmit_job_id = $job_info->{resubmit_job_id}\n");
            print("    events = ");
            foreach my $e (@job_events){
                print("[$e->{date}] $e->{type}:$e->{description}");
                print(" , ");
            }
            print("\n\n");
        }else{
            if ($Printed_jobs == 0){
                print <<EOS;
Job id           Name             User             Time Use S Queue
---------------- ---------------- ---------------- -------- - -----
EOS
            }

            $job_info->{'command'} = '' if (!defined($job_info->{'command'}));
            printf("%-16.16s %-16.16s %-16.16s %-8.8s %1.1s %5.5s\n",
              $job_info->{'job_id'},
              $job_info->{'command'},
              $job_info->{'job_user'},
              $job_info->{'submission_time'},
              $hashestat{$job_info->{'state'}},
              $job_info->{'queue_name'}
            );
            $Printed_jobs ++;
        }
    }
}

sub get_history($$$){
    my ($base,$date_start,$date_stop) = @_;

    my %hash_dumper_result;
    my @nodes = iolib::list_resources($base);
    $hash_dumper_result{resources} = \@nodes;
    my %job_gantt = iolib::get_jobs_gantt_scheduled($base,$date_start,$date_stop);
    $hash_dumper_result{jobs} = \%job_gantt;
    print(Dumper(%hash_dumper_result));
    #print finished or running jobs
    my %jobs_history = iolib::get_jobs_range_dates($base,$date_start,$date_stop);
    foreach my $i (keys(%jobs_history)){
        if (!defined($job_gantt{$i}) || $job_gantt{$i}->{queue_name} eq "besteffort"){
            if (($jobs_history{$i}->{state} eq "Running") ||
                ($jobs_history{$i}->{state} eq "toLaunch") ||
                ($jobs_history{$i}->{state} eq "Launching")){
                if ($jobs_history{$i}->{queue_name} eq "besteffort"){
                    $jobs_history{$i}->{stop_time} = iolib::get_gantt_visu_date($base);
                }else{
                    #This job must be already  printed by gantt
                    next;
                }
            }
            $hash_dumper_result{jobs}{$i} = $jobs_history{$i};
        }
    }

    #print Down or Suspected resources
    my %dead_resource_dates = iolib::get_resource_dead_range_date($base,$date_start,$date_stop);
    $hash_dumper_result{dead_resources} = \%dead_resource_dates;

    return(\%hash_dumper_result);
}

