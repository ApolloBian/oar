#!/usr/bin/perl
# $Id: oarstat,v 1.27 2005/06/01 16:20:42 capitn Exp $
# print active job properties

use strict;
use warnings;
use Data::Dumper;
use oar_iolib;
use Getopt::Long;

#Try to load XML module
my $XML_enabled = 1;
unless (eval "use XML::Simple qw(XMLout);1"){
    $XML_enabled = 0;
}

#Try to load YAML module
my $YAML_enabled = 1;
unless (eval "use YAML;1"){
    $YAML_enabled = 0;
}

# suitable Data::Dumper configuration for serialization
$Data::Dumper::Purity = 1;
$Data::Dumper::Terse = 1;
$Data::Dumper::Indent = 0;
$Data::Dumper::Deepcopy = 1;

my $Printed_jobs = 0;

sub print_job($$);

Getopt::Long::Configure ("gnu_getopt");
my $sos;
my @job_ids;
my $full_view;
my $gantt_query;
my $XML_mode;
my $YAML_mode;
my $DUMPER_mode;
GetOptions ("help|h" => \$sos,
            "job|j=i"  => \@job_ids,
            "full|f"  => \$full_view,
            "gantt|g=s"   => \$gantt_query,
            "XML|X" => \$XML_mode,
            "YAML|Y" => \$YAML_mode,
            "DUMPER|D" => \$DUMPER_mode
           );

if ($sos){
    print <<EOS;
Usage: $0 [[-h] | [-j job_id][-f] | [-g "date,date"]] [-X | -Y | -D]
Display job informations
Options:
  -h, --help    show this help screen
  -j, --job     show informations only for the specified job
  -f, --full    show full informations
  -g, --gantt   show job informations between two dates like "2006-03-30 13:49:27, 2006-04-30 13:49:27"
  -D, --DUMPER  print result in DUMPER format
  -X, --XML     print result in XML format
  -Y, --YAML    print result in YAML format
EOS
    exit(0);
}

my $base = iolib::connect_ro();

my @jobs;

if ((!defined($gantt_query)) and ($#job_ids < 0)){
    push(@jobs, iolib::get_jobs_in_state($base, "Waiting"));
    push(@jobs, iolib::get_jobs_in_state($base, "Hold"));
    push(@jobs, iolib::get_jobs_in_state($base, "toAckReservation"));
    push(@jobs, iolib::get_jobs_in_state($base, "toLaunch"));
    push(@jobs, iolib::get_jobs_in_state($base, "Launching"));
    push(@jobs, iolib::get_jobs_in_state($base, "Running"));
}elsif($#job_ids >= 0){
    foreach my $j (@job_ids){
        push(@jobs, iolib::get_job($base,$j));
    }
}

if (!defined($gantt_query)){
    foreach my $j (@jobs) {
        print_job($base,$j);
    }
}


iolib::disconnect($base);

exit(0);

sub print_job($$){
    my $dbh = shift;
    my $job_info = shift;

    return if (!defined($job_info));
    
    my @nodes;
    my $mold;
    my @date_tmp = iolib::get_gantt_job_start_time($dbh,$job_info->{job_id});
    my @job_events = iolib::get_job_events($dbh,$job_info->{job_id});
   
    if ($job_info->{assigned_moldable_job} ne ""){
        @nodes = iolib::get_job_resources($dbh,$job_info->{assigned_moldable_job});
        $mold = iolib::get_moldable_job($dbh,$job_info->{assigned_moldable_job});
    }
    
    my %data_to_display = (
        "Job_Id" => $job_info->{job_id},
        "name" => $job_info->{job_name},
        "owner" => $job_info->{job_user},
        "state" => $job_info->{state},
        "assigned_resources" => \@nodes,
        "queue" => $job_info->{queue_name},
        "command" => $job_info->{command},
        "launchingDirectory" => $job_info->{launching_directory},
        "jobType" => $job_info->{job_type},
        "properties" => $job_info->{properties},
        "reservation" => $job_info->{reservation},
        "walltime" => $mold->{moldable_walltime},
        "submissionTime" => $job_info->{submission_time},
        "startTime" => $job_info->{start_time},
        "message" => $job_info->{message},
        "scheduledStart" => $date_tmp[0],
        "events" => \@job_events
    );
    
    if (defined($DUMPER_mode)){
        print(Dumper(\%data_to_display));
    }elsif(defined($XML_mode)){
        if ($XML_enabled == 1){
        print(XMLout(\%data_to_display));
        }else{
            warn("[ERROR] Cannot load XML module.\n");
            return(5);
        }
    }elsif(defined($YAML_mode)){
        if ($YAML_enabled == 1){
            print(YAML::Dump(\%data_to_display));
        }else{
            warn("[ERROR] Cannot load YAML module.\n");
            return(6);
        }
    }else{
        if (defined($full_view)){
            print("Job_Id: $job_info->{job_id}\n");
            if (defined($job_info->{job_name})){
                print("    name = $job_info->{job_name}\n");
            }else{
                print("    name = \n");
            }
            print("    owner = $job_info->{job_user}\n");
            print("    state = $job_info->{state}\n");
            print("    assigned_resources = ".join("+",@nodes)."\n");
            print("    queue = $job_info->{queue_name}\n");
            print("    command = $job_info->{command}\n");
            print("    launchingDirectory = $job_info->{launching_directory}\n");
            print("    jobType = $job_info->{job_type}\n");
            print("    properties = $job_info->{properties}\n");
            print("    reservation = $job_info->{reservation}\n");
            if (defined($mold->{moldable_walltime})){
                print("    walltime = $mold->{moldable_walltime}\n");
            }else{
                print("    walltime = \n");
            }
            print("    submissionTime = $job_info->{submission_time}\n");
            print("    startTime = $job_info->{start_time}\n");
            print("    stopTime = $job_info->{stop_time}\n");
            print("    message = $job_info->{message}\n");
            if (defined($date_tmp[0])){
                print("    scheduledStart = $date_tmp[0]\n");
            }else{
                print("    scheduledStart = no prediction\n");
            }
            print("    events = ");
            foreach my $e (@job_events){
                print("[$e->{date}] $e->{type}:$e->{description}");
                print(" , ");
            }
            print("\n\n");
        }else{
            if ($Printed_jobs == 0){
                print <<EOS;
Job id           Name             User             Time Use S Queue
---------------- ---------------- ---------------- -------- - -----
EOS
            }
            my %hashetat = (
                'Waiting' => 'W',
                'toLaunch' => 'L',
                'Launching' => 'L',
                'Hold'        => 'H',
                'Running' => 'R',
                'Terminated' => 'T',
                'Error' => 'E',
                'toError' => 'E',
                'Finishing' => 'F',
                'toAckReservation' => 'W'
            );
 
            printf("%-16.16s %-16.16s %-16.16s %-8.8s %1.1s %5.5s\n",
              $job_info->{'job_id'},
              $job_info->{'command'},
              $job_info->{'job_user'},
              $job_info->{'submission_time'},
              $hashetat{$job_info->{'state'}},
              $job_info->{'queue_name'}
            );
            $Printed_jobs ++;
        }
    }
}

