#!/usr/bin/perl
# change node state dynamically

use strict;
use DBI();
use Data::Dumper;
use oar_iolib;
use oar_conflib qw(init_conf dump_conf get_conf is_conf);
use Sys::Hostname;
use Getopt::Long;
use oar_Tools;
use oarversion;

$| = 1;

my $exit_code = 0;

my $hostname ;
my $base;
my $state ;
my $nowaitMode;
my @properties;
my $new_resource;
my $sos;
my @resource;
my $Sql_property;

# Get OAR configuration
init_conf($ENV{OARCONFFILE});
my $remote_host = get_conf("SERVER_HOSTNAME");
my $remote_port = get_conf("SERVER_PORT");

sub set_hostname_properties($$$){
    my $base = shift;
    my $hostname = shift;
    my $arrayProp = shift;

    foreach my $p (@{$arrayProp}){
        if ($p =~ m/(.+)\s*=\s*(.+)/m){
            if (oar_Tools::check_resource_system_property($1) == 1){
                print("Cannot update property $1 because it is a system field.\n");
                next;
            }
            print("Update property $1 with value $2 on node $hostname ...");
            my $ret = iolib::set_node_property($base,$hostname,$1,$2);
            if ($ret == 0){
                print("DONE\n");
            }else{
                print("ERROR (wrong property or wrong value)\n");
            }
        }else{
            print("/!\\ Bad property syntax : -p property=value\n");
        }
    }
}


sub set_resource_properties($$$){
    my $base = shift;
    my $resource = shift;
    my $arrayProp = shift;

    foreach my $p (@{$arrayProp}){
        if ($p =~ m/(.+)\s*=\s*(.+)/m){
            if (oar_Tools::check_resource_system_property($1) == 1){
                print("Cannot update property $1 because it is a system field.\n");
                next;
            }
            print("Update property $1 with value $2 ...");
            my $ret = iolib::set_resource_property($base,$resource,$1,$2);
            if ($ret == 0){
                print("DONE\n");
            }elsif($ret == 2){
                print("SAME (the property is already equal to the value)\n");
            }else{
                print("ERROR (wrong property or wrong value)\n");
            }
        }else{
            print("/!\\ Bad property syntax : -p property=value\n");
        }
    }
}

sub wait_end_of_running_jobs($$){
    my $dbh = shift;
    my $job_list = shift;

    my $max_timeout = 30;
    my $jobInfo;
    foreach my $j (sort(@{$job_list})){
        $jobInfo = {'state' => 'Running'};
        # active waiting : it is not very nice but it works!!
        print("\t$j ");
        my $timeCount = 0;
        while ((($jobInfo->{'state'} ne "Terminated") and ($jobInfo->{'state'} ne "Error")) and ($timeCount < $max_timeout)){
            $jobInfo = iolib::get_job($dbh,$j);
            sleep(1);
            print(".");
            $timeCount++;
        }
        if ($timeCount >= $max_timeout){
            print(" Timouted\n");
        }else{
            print(" Deleted\n");
        }
    }
    print("Check done\n");
}


# print explainations for the user and exit
sub usage {
    print <<EOS;
Usage: $0 [-h hostname | [[-r resource_number][--sql "sql syntax"] | -a]]
[-a] [-p "property=value"] [-s state]
Change the state and properties of a node in OAR.
You can also create a new resource.
Options:
 -a, --add                       add a new resource
 -s, --state=STATE               set the new state of the node
 -h, --hostname=HOSTNAME         set the node hostname
 -r, --resource                  set the resource
     --sql                       get resource identifiers which respond to the
                                 SQL where clause on the table jobs
                                 (ex: "type = 'default'")
 -p, --property="PROPERTY=VALUE" set the property of the node to the given
                                 value
 -n, --nowait                    do not wait for job end when the node
                                 switches to Absent or Dead
     --help                      display this help
 -v, --version                   print OAR version number
N.B.:
 - The states allowed are: Alive, Absent or Dead.
 - If not specified, the hostname will be retrieved via the 'hostname'
   utility.
 - You cannot specify "-a" and "-r" together.
EOS
    exit(1);
}


my $Version;
# Options on arg command line
Getopt::Long::Configure ("gnu_getopt");
GetOptions ("state|s=s" => \$state,
            "hostname|h=s"   => \$hostname,
            "nowait|n" => \$nowaitMode,
            "property|p=s" => \@properties,
            "add|a" => \$new_resource,
            "help" => \$sos,
            "sql=s"   => \$Sql_property,
            "resource|r=i" => \@resource,
            "version|v" => \$Version
           );

usage() if (defined($sos));

if (defined($Version)){
    print("OAR version : ".oarversion::get_version()."\n");
    exit(0);
}

defined(@properties) || defined($state) || defined($new_resource) or usage();
if (defined($state) && !(($state eq 'Alive') || ($state eq 'Absent') || ($state eq 'Dead'))){
    warn("/!\\ Bad state value. Possibilities are : Alive | Absent | Dead \n");
    usage();
}

if (defined($Sql_property)){
    my $db = iolib::connect_ro();
    foreach my $r (iolib::get_resources_with_given_sql($db,$Sql_property)){
        push(@resource, $r);
    }
    iolib::disconnect($db);
}

if (defined($new_resource)){
    if (($#resource >= 0) or (defined($Sql_property))){
        warn("/!\\ You cannot use -r|--resource and (-a|--add or --sql) options together\n");
        usage();
    }
}

defined($hostname) or $hostname = hostname();
#print("$hostname\n");
my $base = iolib::connect() or die("Cannot connect to the database\n");

if (defined($new_resource)){
    # Create a new resource
    print("new resource\n");
    print("$hostname added in the database\n");
    $state = "Alive" if (!defined($state));
    push(@resource,iolib::add_resource($base, $hostname, $state));
    oar_Tools::notify_tcp_socket($remote_host,$remote_port,"ChState");
    oar_Tools::notify_tcp_socket($remote_host,$remote_port,"Term");
}else{
    if (($#resource >= 0) or (defined($Sql_property))){
        if (defined($state)){
            foreach my $r (@resource){
                #$base->do("LOCK TABLE resources WRITE");
                iolib::set_resource_nextState($base,$r,$state);
                #$base->do("UNLOCK TABLES");
                oar_Tools::notify_tcp_socket($remote_host,$remote_port,"ChState");
                print("$r --> $state\n");
                if (($state eq 'Dead') || ($state eq 'Absent')){
                    if ($nowaitMode){
                        print("Done\n");
                    }else{
                        print("Check jobs to delete on resource $r :\n");
                        my @jobs = iolib::get_resource_job($base,$r);
                        wait_end_of_running_jobs($base,\@jobs);
                    }
                }elsif ($state eq 'Alive'){
                    print("Done\n");
                }
            }
        }
    }else{
        # update all resources with netwokAdress = $hostname
        if (defined($state)){
            #$base->do("LOCK TABLE resources WRITE");
            iolib::set_node_nextState($base,$hostname,$state);
            #$base->do("UNLOCK TABLES");
            oar_Tools::notify_tcp_socket($remote_host,$remote_port,"ChState");
            print("$hostname --> $state\n");
            if (($state eq 'Dead') || ($state eq 'Absent')){
                if ($nowaitMode){
                    print("Done\n");
                }else{
                    print("Check jobs to delete on node $hostname :\n");
                    my @jobs = iolib::get_node_job($base,$hostname);
                    wait_end_of_running_jobs($base,\@jobs);
                }
            }elsif ($state eq 'Alive'){
                print("Done\n");
            }
        }
    }
}

# Update properties
if (defined(@properties)){
    if (($#resource >= 0) or (defined($Sql_property))){
        foreach my $r (@resource){
            if (!defined(iolib::get_resource_info($base,$r))){
                warn("/!\\ The resource $r does not exist in OAR database.\n");
                $exit_code = 1;
            }else{
                set_resource_properties($base,$r,\@properties);
            }
        }
    }else{
        if (iolib::is_node_exists($base,$hostname) == 0){
            warn("/!\\ The node $hostname does not exist in OAR database. First you must add it with -a|--add option.\n");
            $exit_code = 2;
        }else{
            set_hostname_properties($base,$hostname,\@properties);
            $exit_code = 0;
        }
    }
}


iolib::disconnect($base);

exit($exit_code);

