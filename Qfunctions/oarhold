#!/usr/bin/perl
# $Id$
#Hold a job --> it will not be scheduled

use strict;
use warnings;
use Data::Dumper;
use DBI();
use oar_iolib;
use oar_conflib qw(init_conf dump_conf get_conf is_conf);
use oar_Tools;
use Getopt::Long;
use oarversion;

sub usage {
    print <<EOS;
Usage: $0 [job_ids][--sql "sql syntax"][-r][-V][-h]
Ask OAR to not schedule job_id until oarresume command will be executed.
  -r, --running manage not only Waiting jobs but also Running one
                (can suspend the job)
      --sql     hold jobs which respond to the SQL where clause on the table
                jobs (ex: "project = 'p1'")
  -h, --help    show this help screen
  -V, --version print OAR version number
EOS
}

my $Help;
my $Version;
my $Suspend_running;
my $Sql_property;
GetOptions ("help|h" => \$Help,
            "version|V" => \$Version,
            "sql=s"   => \$Sql_property,
            "running|r" => \$Suspend_running
           );

if (defined($Help)){
    usage();
    exit(0);
}

if (defined($Version)){
    print("OAR version : ".oarversion::get_version()."\n");
    exit(0);
}

init_conf($ENV{OARCONFFILE});
my $remote_host = get_conf("SERVER_HOSTNAME");
my $remote_port = get_conf("SERVER_PORT");

my $Cpuset_field = get_conf("JOB_RESOURCE_MANAGER_PROPERTY_DB_FIELD");

if ((@ARGV < 1) and (!defined($Sql_property))){
    usage();
    exit(1);
}

my @job_ids;
my $exit_code = 0;
foreach my $j (@ARGV){
    if ($j =~ /^\d+$/){
        push(@job_ids, $j);
    }else{
        warn("[ERROR] \"$j\" is not a valid job identifier\n");
        $exit_code = 3;
    }
}
if (defined($Sql_property)){
    my $db = iolib::connect_ro();
    foreach my $j (iolib::get_jobs_with_given_properties($db,$Sql_property)){
        push(@job_ids, $j->{job_id});
    }
    iolib::disconnect($db);
}

my $base = iolib::connect();
foreach my $j (@job_ids){
    my $err_job = 0;
    if (defined($Suspend_running)){
        my $types = iolib::get_current_job_types($base,$j);
        if (!defined($Cpuset_field)){
            warn("CPUSET tag is not configured in the oar.conf.\n");
            $err_job = 2;
        }elsif (defined($types->{cosystem})){
            warn("This job is of the cosystem type. We cannot suspend this kind of jobs.\n");
            $err_job = 3;
        }elsif (defined($types->{deploy})){
            warn("This job is of the deploy type. We cannot suspend this kind of jobs.\n");
            $err_job = 4;
        }
    }
    if ($err_job == 0){
        my $err = iolib::hold_job($base,$j,$Suspend_running);

        if ($err != 0) {
            my $str = "/!\\ Cannot hold $j :";
            if ($err == -1){
                warn("$str this job does not exist.\n");
            }elsif ($err == -2){
                warn("$str you are not the right user.\n");
            }elsif ($err == -3){
                warn("$str the job is not in the right state (try '-r' option).\n");
            }elsif ($err == -4){
                warn("$str only oar or root users can use '-r' option.\n");
            }else{
                warn("$str unknown reason.\n");
            }
            $exit_code = 1;
        }else{
            print("[$j] Hold request was sent to the OAR server.\n");
        }
    }else{
        $exit_code = 2;
    }
}

iolib::disconnect($base);



#Signal Almigthy
oar_Tools::notify_tcp_socket($remote_host,$remote_port,"ChState");

exit($exit_code);
