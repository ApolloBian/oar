#!/usr/bin/perl
# $Id$
# print OAR node properties
#
# EXAMPLES:
# oarnodes -l
#   => returns the complete list without information  - status = 0
# oarnodes -a
#   => returns the complete list with information  - status = 0
# oarnodes -s
#   => returns only the state of nodes - status = 0
# oarnodes -h|--help
#   => returns a help message - status = 0
# oarnodes host1 [.. hostn]
#   => returns the information for hostX - status is 0 for every host known - 1 otherwise
#

use strict;
use warnings;
use oar_conflib qw(init_conf dump_conf get_conf is_conf);
use oar_Tools;
use Data::Dumper;
use oar_iolib;
use Getopt::Long;
use oarversion;
use oarnodes_lib;

### CONFIG STUFF ###
Getopt::Long::Configure ("gnu_getopt");

# suitable Data::Dumper configuration for serialization
$Data::Dumper::Purity = 1;
$Data::Dumper::Terse = 1;
$Data::Dumper::Indent = 0;
$Data::Dumper::Deepcopy = 1;

### END CONFIG STUFF ###


### Variables declaration ###
my $stateMode;
my $usage;
my $listall;
my $listallwithinfo;
my $sql_property;
my $XML_mode;
my $YAML_mode;
my $JSON_mode;
my $DUMPER_mode;
my $Version;
my $Old;
my $smp;
my $events;
my @resources;
my @nodes;
### END Variables declaration ###


### Print Methods ###

sub print_usage(){
    print <<EOS;
Usage: oarnodes [ -a | -r number | --sql sql_properties | -s | -l | -h | -V ]
[list of nodes] [ -e [date] | -X | -Y | -D | --backward-compatible [--smp]]
Display node informations
Options:
 -a, --all          show all nodes with their properties (default oarnodes output)
 -r, --resource     show only a resource properties
 -s, --state        show only node states
 -l, --list         show only node list
 -e, --events       show events recorded for a node: either the last 20 if no 
                    date is given or all events since the specified date
     --sql          display resources which matches this sql where clause
                    (ex: "state = 'Suspected'")
 -D, --dumper       print result in DUMPER format
 -X, --xml          print result in XML format
 -Y, --yaml         print result in YAML format
 -J, --json         print result in JSON format
     --backward-compatible   print informations of the form of 1.* OAR version
     --smp          backward-compatible suboption: prints one node per resource
                    (usefull for big smp systems) 
 -h, --help         show this help screen
 -V, --version      print OAR version number
EOS
}

sub print_oar_version(){
    print "OAR version : ".oarnodeslib::get_oar_version()."\n";
}

sub print_events($){
	my $date_from = shift;
	my $hostname = $ARGV[0] or die("\/!\\ No hostname specified for the --events option\n");
	my $events = oarnodeslib::get_events($hostname, $date_from);
	foreach my $current_event (@$events) {
        printf("%s| %s| %s: %s\n", 
		  oarnodeslib::format_date($current_event->{'date'}),
		  $current_event->{'job_id'},
		  $current_event->{'type'},
		  $current_event->{'description'}
		);
    }
}

sub add_sql_resources($){
	my $sql_clause = shift;
	my $sql_resources = oarnodeslib::get_resources_with_given_sql($sql_clause);
	push @resources, @$sql_resources;
}

sub format_result($){
	my $result = shift;
    if (defined($DUMPER_mode)){
        print(Dumper($result));
    }elsif(defined($XML_mode)){
        print(oarnodeslib::encode_result($result, "XML"));
    }elsif(defined($YAML_mode)){
        print(oarnodeslib::encode_result($result, "YAML"));
    }elsif(defined($JSON_mode)){
        print(oarnodeslib::encode_result($result, "JSON"));
    }
}

sub print_resources_states_for_hosts($){
	my $nodes = shift;
	foreach my $current_host (@$nodes){
	  my $resources_states = oarnodeslib::get_resources_states_for_host($current_host);
	  print "$current_host\n";
	  while ( my ($k,$v) = each %$resources_states ){
		print "    $k : $v\n";
	  }
	}
}

sub print_resources_states($){
	my $resources = shift;
	my $resources_states = oarnodeslib::get_resources_states($resources);
	while ( my ($k,$v) = each %$resources_states ){
		print "$k : $v\n";
	}
}

sub print_hosts_infos($){
	my $nodes = shift;
	foreach my $current_node (@$nodes){
		my $infos = oarnodeslib::get_resources_infos_for_host($current_node);
		print "$current_node\n";
		while ( my ($resource_id,$properties) = each %$infos ){
			print_resource($properties);
		}
	}
}

sub print_resources_infos($){
	my $resources = shift;
	my $res_infos = oarnodeslib::get_resources_infos($resources);
	while ( my ($k,$v) = each %$res_infos ){
		print_resource($v);
	}
}

sub print_resource($){
	my $info = shift;
	print Dumper($info)."\n";
}


### END Print Methods ###


### Main ###

# parse command line option
GetOptions ("state|s" => \$stateMode,
            "help|h"  => \$usage,
            "list|l"  => \$listall,
            "all|a"   => \$listallwithinfo,
            "events|e:s"  => \$events,
            "resource|r=i" => \@resources,
            "sql=s" => \$sql_property,
            "xml|X" => \$XML_mode,
            "yaml|Y" => \$YAML_mode,
            "json|J" => \$JSON_mode,
            "dumper|D" => \$DUMPER_mode,
            "backward-compatible" => \$Old,
            "smp" => \$smp,
            "version|V" => \$Version
           );

if ($usage){
    print_usage();
    exit(0);
}
if ($Version){
    print_oar_version();
    exit(0);
}

oarnodeslib::open_db_connection();
# Nodes list handling (set @nodes to what has been requested)
if($ARGV[0]){
    @nodes = @ARGV;
}else{
    my $nodes_tmp = oarnodeslib::get_all_hosts();
	@nodes = @$nodes_tmp;
}

if (defined($events)) {
    print_events($events);
    exit(0);
}
if (defined($sql_property)) {
	add_sql_resources($sql_property);
}
if ($stateMode){
	if ($#resources >= 0){
		print_resources_states(\@resources);
	}
	else{
		print_resources_states_for_hosts(\@nodes);
	}
}
if ($listall){
	my $nodes_tmp = oarnodeslib::get_all_hosts();
	@nodes = @$nodes_tmp;
	foreach my $current_node (@nodes) {
		print "$current_node\n";
	}
}
# if ($listallwithinfo){
# 
# }
if ($#resources >= 0){
	print_resources_infos(\@resources);
}
elsif ($#nodes >= 0){
	print_hosts_infos(\@nodes);
}


oarnodeslib::close_db_connection();

### END Main ###

# my $base;
# my $exitstatus;
# 
# 
# if (($#resources >= 0) or (defined($sql_property))){
# 
#     my @data_to_display;
#     my %state_hash;
#     foreach my $r (@resources) {
#         my $resource_info = iolib::get_resource_info($base,$r);
#         if (!defined($resource_info)) {
#             warn("/!\\ $r UNKNOWN\n");
#             $exitstatus = 1;
#             next;
#         }
#         $state_hash{$r} = $resource_info->{state};
#         my %tmp_hash;
#         $tmp_hash{state} = $resource_info->{state};
#         $tmp_hash{network_address} = $resource_info->{network_address};
#         $tmp_hash{properties} = $resource_info;
#         #if ($resource_info->{state} eq "Alive") {    
#             my @jobs = iolib::get_resource_job($base,$resource_info->{resource_id});
#             if ($#jobs >= 0){
#                 $tmp_hash{jobs} = \@jobs;
#             }
#         #}
#         if ($tmp_hash{state} eq "Absent" && $resource_info->{available_upto} != 0) {
#             $tmp_hash{state} .= " (standby)";
#         }
#         $tmp_hash{resource_id} = $r;
#         push(@data_to_display, \%tmp_hash);
#     }
#     my $data_to_dump = \@data_to_display;
#     if (defined($stateMode)){
#         $data_to_dump = \%state_hash;
#     }
# 	else{
#         foreach my $h (@data_to_display){
#             my %a = %{$h};
#             if (defined($stateMode)){
#                 print("$a{resource_id} : $a{state}\n");
#                 next;
#             }
#             print("resource_id : $a{resource_id}\n");
#             foreach my $b (keys(%a)){
#                 if ($b eq "properties"){
#                     my $str = "properties : ";
#                     foreach my $prop (sort(keys(%{$a{$b}}))){
#                         if (oar_Tools::check_resource_system_property($prop) == 0){
#                             if (defined($a{$b}->{$prop})){
#                                 $str .= "$prop=$a{$b}->{$prop},";
#                             }else{
#                                 $str .= "$prop=,";
#                             }
#                         }
#                     }
#                     chop($str);
#                     print("$str\n");
#                 }elsif ($b eq "jobs"){
#                     print("job : @{$a{$b}}\n");
#                 }elsif ($b eq "resource_id"){
#                     next;
#                 }else{
#                     print("$b : $a{$b}\n");
#                 }
#             }
#             print("\n");
#         }
#     }
#     iolib::disconnect($base);
# 
#     exit($exitstatus);
# }
# 
# ...........
#else{
#     # Default display of oarnodes
#     my %data_to_display;
#     foreach my $node ( @nodes ) {
#         my @node_info = iolib::get_node_info($base,$node);
#         if ($#node_info < 0) {
#             warn("/!\\ $node UNKNOWN\n");
#             $exitstatus = 1;
#             next;
#         }
#         my %tmp_hash1;
#         foreach my $r (@node_info){
#             my %tmp_hash2;
#             $tmp_hash2{state} = $r->{state};
#             #if ($r->{state} eq "Alive") {    
#                 my @jobs = iolib::get_resource_job($base,$r->{resource_id});
#                 if ($#jobs >= 0){
#                     $tmp_hash2{jobs} = \@jobs;
#                 }
#             #}
#             $tmp_hash2{network_address} = $r->{network_address};
#             my $properties = iolib::get_resource_info($base,$r->{resource_id});
#             if ($tmp_hash2{state} eq "Absent" && $properties->{available_upto} != 0) {
#                 $tmp_hash2{state} .= " (standby)";
#             }
#             $tmp_hash2{properties} = $properties;
#             $tmp_hash1{$r->{resource_id}} = \%tmp_hash2;
#         }
#         $data_to_display{$node} = \%tmp_hash1;
#     }
# 
# 
# 	if($Old){
#         my $Node_file_db_field_distinct_values = get_conf("NODE_FILE_DB_FIELD_DISTINCT_VALUES");
#         $Node_file_db_field_distinct_values = oar_Tools::get_default_node_file_db_field_distinct_values() if (!defined($Node_file_db_field_distinct_values));
#         foreach my $aa (sort(keys(%data_to_display))){
#             my @res = keys(%{$data_to_display{$aa}});
#             my %tmp_already_there;
#             my %tmp_already_there2;
#             my $nb = 0;
#             my $nb_jobs = 0;
#             my $state;
#             my $properties;
#             my $hostname;
#             my $job_str = '';
#             my $pass = 0;
#             #my %weight_index;
#             foreach my $bb (sort({$a <=> $b} keys(%{$data_to_display{$aa}}))){
#                 my $cpuset;
#                 my @jobs;
#                 foreach my $cc (sort(keys(%{$data_to_display{$aa}->{$bb}}))){
#                     if ($cc eq "properties"){
#                         my $str = "properties = ";
#                         foreach my $prop (sort(keys(%{$data_to_display{$aa}->{$bb}->{$cc}}))){
#                             if ($prop eq "cpuset") { $cpuset=$data_to_display{$aa}->{$bb}->{$cc}->{$prop};}
#                             if ($prop eq $Node_file_db_field_distinct_values) {
#                                 if (!defined($tmp_already_there{$data_to_display{$aa}->{$bb}->{$cc}->{$prop}})){
#                                     $nb++;
#                                     $tmp_already_there{$data_to_display{$aa}->{$bb}->{$cc}->{$prop}} = 1;
#                                 }
#                             }
#                             $pass = 1 if (($prop eq "type") and ($data_to_display{$aa}->{$bb}->{$cc}->{$prop} eq "frontal"));
#                             if (defined($data_to_display{$aa}->{$bb}->{$cc}->{$prop})){
#                                 $str .= "$prop=$data_to_display{$aa}->{$bb}->{$cc}->{$prop},";
#                             }else{
#                                 $str .= "$prop=,";
#                             }
#                         }
#                         chop($str);
#                         $properties = $str;
#                     }elsif ($cc eq "jobs"){
#                         #$nb_jobs += $#{$data_to_display{$aa}->{$bb}->{$cc}} + 1;
#                         my $c=0;
#                         foreach my $j (@{$data_to_display{$aa}->{$bb}->{$cc}}){
#                             #if (!defined($weight_index{$aa})){
#                             #    $weight_index{$aa} = 0;
#                             #}else{
#                             #    $weight_index{$aa}++;
#                             #}
#                             #$job_str .= "$weight_index{$aa}/$j.oarserver,";
#                             if (!defined($tmp_already_there2{$data_to_display{$aa}->{$bb}->{properties}->{$Node_file_db_field_distinct_values}})){
#                                 $tmp_already_there2{$data_to_display{$aa}->{$bb}->{properties}->{$Node_file_db_field_distinct_values}} = 1;
#                                 $jobs[$c]="$j.oarserver";
#                                 $c++; 
#                                 $nb_jobs++;
#                             }
#                         }
#                     }elsif ($cc eq "network_address"){
#                         $hostname = $data_to_display{$aa}->{$res[0]}->{$cc};
#                     }elsif ($cc eq "state"){
#                         if ($smp) {
#                             $state = $data_to_display{$aa}->{$bb}->{$cc};
#                         }else{
#                             $state = $data_to_display{$aa}->{$res[0]}->{$cc};
#                         }
#                     }
#                 }
#                 # Construct the jobs string
#                 my $c=0;
#                 foreach my $j (@jobs) {
#                     if ($cpuset ne "" && !$smp) {
#                         $job_str .= "$cpuset/$j,";
#                     }else{
#                         $job_str .= "$c/$j,";
#                     }
#                     $c++;
#                 }
#                 
#                 if ($smp) {
#                     next if ($hostname eq "");
#                     next if ($pass == 1);
#                     printf("%s[%03d]\n",$hostname,$bb);
#                     print("     pcpus = 1\n");
#                     chop($job_str) if (defined($job_str));
#                     print("     jobs = $job_str\n");
#                     print("     weight = $nb_jobs\n");
#                     print("     hostname = $hostname\n");
#                     $state = "free" if ($state eq "Alive");
#                     $state = "job" if ($job_str ne '');
#                     print("     state = $state\n");
#                     print("     $properties\n");
#                     print("\n");
#                     $job_str = "";
#                 }
#             }
#             if (!$smp) { 
#                 next if ($hostname eq "");
#                 next if ($pass == 1);
#                 print("$aa\n");
#                 print("     pcpus = $nb\n");
#                 chop($job_str) if (defined($job_str));
#                 print("     jobs = $job_str\n");
#                 print("     weight = $nb_jobs\n");
#                 print("     hostname = $hostname\n");
#                 $state = "free" if ($state eq "Alive");
#                 $state = "job" if ($nb == $nb_jobs);
#                 print("     state = $state\n");
#                 print("     $properties\n");
#                 print("\n");
#             }
#         }
#     }else{
#         foreach my $aa (sort(keys(%data_to_display))){
#             print("$aa\n");
#             foreach my $bb (sort({$a <=> $b} keys(%{$data_to_display{$aa}}))){
#                 print("    $bb\n");
#                 foreach my $cc (sort(keys(%{$data_to_display{$aa}->{$bb}}))){
#                     if ($cc eq "properties"){
#                         my $str = "properties : ";
#                         foreach my $prop (sort(keys(%{$data_to_display{$aa}->{$bb}->{$cc}}))){
#                             if (oar_Tools::check_resource_system_property($prop) == 0){
#                                 if (defined($data_to_display{$aa}->{$bb}->{$cc}->{$prop})){
#                                     $str .= "$prop=$data_to_display{$aa}->{$bb}->{$cc}->{$prop},";
#                                 }else{
#                                     $str .= "$prop=,";
#                                 }
#                             }
#                         }
#                         chop($str);
#                         print("        $str\n");
#                     }elsif ($cc eq "jobs"){
#                         print("        jobs : @{$data_to_display{$aa}->{$bb}->{$cc}}\n");
#                     }else{
#                         print("        $cc : $data_to_display{$aa}->{$bb}->{$cc}\n");
#                     }
#                 }
#                 print("\n");
#             }
#         }
#     }
# }
# iolib::disconnect($base);
# 
# exit($exitstatus);
