#!/usr/bin/perl
# $Id: oarnodes,v 1.13 2005/07/20 09:29:20 capitn Exp $
# print OAR node properties
#
# EXAMPLES:
# oarnodes -l
#   => returns the complete list without information  - status = 0
# oarnodes -a
#   => returns the complete list with information  - status = 0
# oarnodes -s
#   => returns only the state of nodes - status = 0
# oarnodes -h|--help
#   => returns a help message - status = 0
# oarnodes host1 [.. hostn]
#   => returns the information for hostX - status is 0 for every host known - 1 otherwise
#

use strict;
use warnings;
use Data::Dumper;
use oar_iolib;
use Getopt::Long;
use oarversion;

#Try to load XML module
my $XML_enabled = 1;
unless (eval "use XML::Simple qw(XMLout);1"){
    $XML_enabled = 0;
}

#Try to load YAML module
my $YAML_enabled = 1;
unless (eval "use YAML;1"){
    $YAML_enabled = 0;
}

# suitable Data::Dumper configuration for serialization
$Data::Dumper::Purity = 1;
$Data::Dumper::Terse = 1;
$Data::Dumper::Indent = 0;
$Data::Dumper::Deepcopy = 1;

Getopt::Long::Configure ("gnu_getopt");
my $stateMode;
my $usage;
my $listall;
my $listallwithinfo;
my @resources;
my $XML_mode;
my $YAML_mode;
my $DUMPER_mode;
my $Version;
my $Old;
GetOptions ("state|s" => \$stateMode,
            "help|h"  => \$usage,
            "list|l"  => \$listall,
            "all|a"   => \$listallwithinfo,
            "resource|r=i" => \@resources,
            "XML|X" => \$XML_mode,
            "YAML|Y" => \$YAML_mode,
            "DUMPER|D" => \$DUMPER_mode,
            "backward_compatible" => \$Old,
            "version|v" => \$Version
           );

if ($usage){
    print <<EOS;
Usage: $0 [[ -a | -r number | -s | -l | -h | -v ] [list of nodes] [-X | -Y | -D] | --backward_compatible]
Display node informations
Options:
 -a, --all          show all nodes with their properties
 -r, --resource     show only a resource properties
 -s, --state        show only node states
 -l, --list         show only node list
 -D, --DUMPER       print result in DUMPER format
 -X, --XML          print result in XML format
 -Y, --YAML         print result in YAML format
     --backward_compatible print informations of the form of 1.* OAR version
 -h, --help         show this help screen
 -v, --version      print OAR version number
EOS
    exit(0);
}

if (defined($Version)){
    print("OAR version : ".oarversion::get_version()."\n");
    exit(0);
}

my $exitstatus = 0;
my $base = iolib::connect_ro();

if ($#resources >= 0){
    my %data_to_display;
    foreach my $r (@resources) {
        my $resource_info = iolib::get_resource_info($base,$r);
        if (!defined($resource_info)) {
            warn("/!\\ $r UNKNOWN\n");
            $exitstatus = 1;
            next;
        }
        my %tmp_hash;
        $tmp_hash{state} = $resource_info->{state};
        if ($resource_info->{state} eq "Alive") {    
            my @jobs = iolib::get_resource_job($base,$resource_info->{resource_id});
            if ($#jobs >= 0){
                $tmp_hash{jobs} = \@jobs;
            }
            my %properties = iolib::get_resource_properties($base,$resource_info->{resource_id});
            $tmp_hash{properties} = \%properties;
        }
        $data_to_display{$r} = \%tmp_hash;
    }
    if (defined($DUMPER_mode)){
        print(Dumper(\%data_to_display));
    }elsif(defined($XML_mode)){
        if ($XML_enabled == 1){
            print(XMLout(\%data_to_display));
        }else{
            warn("[ERROR] Cannot load XML module.\n");
            $exitstatus = 5;
        }
    }elsif(defined($YAML_mode)){
        if ($YAML_enabled == 1){
            print(YAML::Dump(\%data_to_display));
        }else{
            warn("[ERROR] Cannot load YAML module.\n");
            $exitstatus = 6;
        }
    }else{
        foreach my $a (sort(keys(%data_to_display))){
            print("$a\n");
            foreach my $b (sort(keys(%{$data_to_display{$a}}))){
                if ($b eq "properties"){
                    my $str = "properties : ";
                    foreach my $prop (sort(keys(%{$data_to_display{$a}->{$b}}))){
                        $str .= "$prop=$data_to_display{$a}->{$b}->{$prop},"
                    }
                    chop($str);
                    print("        $str\n");
                }elsif ($b eq "jobs"){
                    print("        job : @{$data_to_display{$a}->{$b}}\n");
                }else{
                    print("        $b : $data_to_display{$a}->{$b}\n");
                }
            }
            print("\n");
        }
    }
    iolib::disconnect($base);

    exit($exitstatus);
}


# Nodes list handling (set @nodes to what has been requested)
my @nodes;
if($ARGV[0]){
    @nodes = @ARGV;
}else{
    @nodes = iolib::list_nodes($base);
}

if (defined($stateMode)){
    # Display the state of each resources
    my %data_to_display;
    foreach my $node ( @nodes ) {
        my @node_info = iolib::get_node_info($base,$node);
        if ($#node_info >= 0){
            my %tmp_data;
            foreach my $n (@node_info){
                $tmp_data{$n->{resource_id}} = $n->{state};
            }
            $data_to_display{$node} = \%tmp_data;
        }else{
            $data_to_display{$node} = undef;
        }
    }
    if (defined($DUMPER_mode)){
        print(Dumper(\%data_to_display));
    }elsif(defined($XML_mode)){
        if ($XML_enabled == 1){
            print(XMLout(\%data_to_display));
        }else{
            warn("[ERROR] Cannot load XML module.\n");
            $exitstatus = 5;
        }
    }elsif(defined($YAML_mode)){
        if ($YAML_enabled == 1){
            print(YAML::Dump(\%data_to_display));
        }else{
            warn("[ERROR] Cannot load YAML module.\n");
            $exitstatus = 6;
        }
    }else{
        foreach my $d (sort(keys(%data_to_display))){
            print("$d\n");
            foreach my $e (sort({$a <=> $b} keys(%{$data_to_display{$d}}))){
                print("    $e : $data_to_display{$d}->{$e}\n");
            }
            print("\n");
        }
    }
}elsif(defined($listall)){
    # Simple list handling
    if (defined($DUMPER_mode)){
        print(Dumper(\@nodes));
    }elsif(defined($XML_mode)){
        if ($XML_enabled == 1){
            print(XMLout(\@nodes));
        }else{
            warn("[ERROR] Cannot load XML module.\n");
            $exitstatus = 5;
        }
    }elsif(defined($YAML_mode)){
        if ($YAML_enabled == 1){
            print(YAML::Dump(\@nodes));
        }else{
            warn("[ERROR] Cannot load YAML module.\n");
            $exitstatus = 6;
        }
    }else{
        foreach my $node ( @nodes ) {
            print($node,"\n");
        }
    }
}else{
    # Default display of oarnodes
    my %data_to_display;
    foreach my $node ( @nodes ) {
        my @node_info = iolib::get_node_info($base,$node);
        if ($#node_info < 0) {
            warn("/!\\ $node UNKNOWN\n");
            $exitstatus = 1;
            next;
        }
        my %tmp_hash1;
        foreach my $r (@node_info){
            my %tmp_hash2;
            $tmp_hash2{state} = $r->{state};
            if ($r->{state} eq "Alive") {    
                my @jobs = iolib::get_resource_job($base,$r->{resource_id});
                if ($#jobs >= 0){
                    $tmp_hash2{jobs} = \@jobs;
                }
            }
            $tmp_hash2{network_address} = $r->{network_address};
            my %properties = iolib::get_resource_properties($base,$r->{resource_id});
            $tmp_hash2{properties} = \%properties;
            $tmp_hash1{$r->{resource_id}} = \%tmp_hash2;
        }
        $data_to_display{$node} = \%tmp_hash1;
    }
    if (defined($DUMPER_mode)){
        print(Dumper(\%data_to_display));
    }elsif(defined($XML_mode)){
        if ($XML_enabled == 1){
            print(XMLout(\%data_to_display));
        }else{
            warn("[ERROR] Cannot load XML module.\n");
            $exitstatus = 5;
        }
    }elsif(defined($YAML_mode)){
        if ($YAML_enabled == 1){
            print(YAML::Dump(\%data_to_display));
        }else{
            warn("[ERROR] Cannot load YAML module.\n");
            $exitstatus = 6;
        }
    }elsif($Old){
        foreach my $aa (sort(keys(%data_to_display))){
            print("$aa\n");
            my @res = keys(%{$data_to_display{$aa}});
            my $nb = $#res + 1;
            print("     pcpus = $nb\n");
            my $nb_jobs = 0;
            my $state;
            my $properties;
            my $hostname;
            foreach my $bb (sort({$a <=> $b} keys(%{$data_to_display{$aa}}))){
                foreach my $cc (sort(keys(%{$data_to_display{$aa}->{$res[0]}}))){
                    if ($cc eq "properties"){
                        my $str = "properties = ";
                        foreach my $prop (sort(keys(%{$data_to_display{$aa}->{$res[0]}->{$cc}}))){
                            $str .= "$prop=$data_to_display{$aa}->{$res[0]}->{$cc}->{$prop},"
                        }
                        chop($str);
                        $properties = $str;
                    }elsif ($cc eq "jobs"){
                        $nb_jobs += $#{@{$data_to_display{$aa}->{$res[0]}->{$cc}}} + 1;
                    }elsif ($cc eq "network_address"){
                        $hostname = $data_to_display{$aa}->{$res[0]}->{$cc};
                    }elsif ($cc eq "state"){
                        $state = $data_to_display{$aa}->{$res[0]}->{$cc};
                    }
                }
            }
            print("     weight = $nb_jobs\n");
            print("     hostname = $hostname\n");
            $state = "free" if ($state eq "Alive");
            print("     state = $state\n");
            print("     $properties\n");
            print("\n");
        }
    }else{
        foreach my $aa (sort(keys(%data_to_display))){
            print("$aa\n");
            foreach my $bb (sort({$a <=> $b} keys(%{$data_to_display{$aa}}))){
                print("    $bb\n");
                foreach my $cc (sort(keys(%{$data_to_display{$aa}->{$bb}}))){
                    if ($cc eq "properties"){
                        my $str = "properties : ";
                        foreach my $prop (sort(keys(%{$data_to_display{$aa}->{$bb}->{$cc}}))){
                            $str .= "$prop=$data_to_display{$aa}->{$bb}->{$cc}->{$prop},"
                        }
                        chop($str);
                        print("        $str\n");
                    }elsif ($cc eq "jobs"){
                        print("        jobs : @{$data_to_display{$aa}->{$bb}->{$cc}}\n");
                    }else{
                        print("        $cc : $data_to_display{$aa}->{$bb}->{$cc}\n");
                    }
                }
                print("\n");
            }
        }
    }
}
iolib::disconnect($base);

exit($exitstatus);

