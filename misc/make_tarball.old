#!/bin/bash
# build a package (debian) using a git repository
set -e

check_branch() {
    if [ "`git branch |egrep \" $1\$\"`" = "" ]; then
        echo "Branch $1 not found!"
        echo "Maybe, you gave me the name of a remote branch?"
        echo "You should work into a local branch tracking the corresponding remote one."
        echo "You can create it this way:"
        echo "  cd <your repository>"
        echo "  git branch $1-work $1"
        echo "  cd .."
        exit 1
    fi
}

get_oar_version() {
    # Sets up the $OARVersion variable
    perl -e "require '$OAR_VERSION_FILE'; print $OAR_VERSION_FUNC" | sed -e "s/ .*//"
}

get_snapshot_version() {
    BRANCH_NAME=$(git branch 2> /dev/null | sed -e "/^[^*]/d" -e "s/* \(.*\)/\1/")
    OARVERSION=$(perl -e "require '$OAR_VERSION_FILE'; print $OAR_VERSION_FUNC" | sed -e "s/ .*//")
    REVISION=$(git log --oneline $OARVERSION..$BRANCH_NAME -- | wc -l)
    SNAPSHOT_ID=`git log --abbrev-commit --pretty=oneline --max-count=1 $BRANCH_NAME |sed 's/ /./'|cut -d. -f1`
    if [ "$BRANCH_NAME" != "2.5" ] && [ "$BRANCH_NAME" != "2.4" ]; then
        PREFIX=$(echo "$BRANCH_NAME" | sed -e "s/[^a-zA-Z0-9.]//g")
    else
        PREFIX=dev
    fi
        echo "${OARVERSION}+${PREFIX}${REVISION}.${SNAPSHOT_ID}"
}

usage() {
    N=$(basename $0)
    cat <<EOF
  $N [-h] [-q] [-s] [-d <directory>]
  $N [-h] [-q] -r   [-d <directory>]
Options:
  -s   snapshot version (default)
  -r   release version (for publishing)
  -f   force to generate a tarball with uncommited changes
  -d   target directory
  -h   print this message and exit
  -q   quiet (only write relevant information for automation to stdout)
EOF
exit 1
}

log_info() {
    if [ "$QUIET" != "yes" ]; then
        echo "$*"
    fi
}

gen_tarball() {
    #####################
    # TARBALL
    #####################
    TMPDIR=$(mktemp -d /tmp/oar-tarball.XXXXXX)
    mkdir -p "${TMPDIR}/oar"
    tar cf - -C . --exclude=.git * | tar -x -C "${TMPDIR}/oar"
    #git archive --format=tar --prefix=oar/ $BRANCH_NAME | tar x -C $TMPDIR
    SNAPSHOTVERSION=$(get_snapshot_version)
    OARVERSION=$(get_oar_version)
    cd $TMPDIR/oar
    if [ "$ACTION" = "snapshot" ]; then
        VERSION=$SNAPSHOTVERSION
        sed -e "s/$OARVERSION/$VERSION/" -i $TMPDIR/oar/$OAR_VERSION_FILE
    else 
        VERSION=$OARVERSION
    fi
    if [ -z "$VERSION" ]; then
        echo "An error occuring when retrieving the oar version. Version is empty."
        exit 1
    fi
    cd $OARPWD
    mv $TMPDIR/oar $TMPDIR/oar-$VERSION
    BUILD_AREA=$TARGET_DIRECTORY/$VERSION
    if [ -e "$BUILD_AREA" ]; then
        log_info "The build area $BUILD_AREA exist. Cleaning..."
        rm -rf $BUILD_AREA
    fi
    mkdir -p $BUILD_AREA
    TARBALL=$BUILD_AREA/oar-$VERSION.tar.gz
    tar czf $TARBALL -C $TMPDIR .
    [ -d "$TMPDIR" ] && rm -rf "$TMPDIR"
    echo "$BUILD_AREA/oar-$VERSION.tar.gz"
}

check_if_uncommited_changes() {
    if [ "$FORCE" != "yes" ] && [ -d ".git" ] && [ "$(git status |grep 'working directory clean')" = "" ]; then
        echo "You have uncommited local changes. check with 'git status'."
        exit 1
    fi

}

check_if_current_directory_is_oar_source() {
if [ -e sources/core/common-libs/lib/OAR/Version.pm ]; then
    # 2.5.x
    OAR_VERSION_FILE=sources/core/common-libs/lib/OAR/Version.pm
    OAR_VERSION_FUNC="print OAR::Version::get_version()"
elif [ -e Tools/oarversion.pm ]; then
    # 2.4.x
    OAR_VERSION_FILE=Tools/oarversion.pm
    OAR_VERSION_FUNC="print oarversion::get_version()"
else
    echo "The branch $OARPWD seems to not be a OAR source folder"
    exit 1
fi
}

ACTION=snapshot
FORCE=
QUIET=no
TARGET_DIRECTORY=../build-area
while getopts "fqrshd:" options; do
  case $options in
    q) QUIET=yes ;;
    s) ACTION=snapshot ;;
    r) ACTION=release ;;
    f) FORCE=yes ;;
    d) TARGET_DIRECTORY="$OPTARG";;
    *) usage ;;
  esac
done
shift $(($OPTIND - 1))

if [ -z "$ACTION" ]; then
    usage
fi

OARPWD=$(pwd)

if ! check_if_current_directory_is_oar_source; then
    exit 1;
fi

if ! check_if_uncommited_changes; then
    exit 1;
fi

mkdir -p $TARGET_DIRECTORY

gen_tarball


