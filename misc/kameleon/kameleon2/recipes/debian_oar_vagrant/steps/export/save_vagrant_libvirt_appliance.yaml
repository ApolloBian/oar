- save_as_vdi:
  # - exec_in: |
  #     echo "Nullify freespace"
  #     dd if=/dev/zero of=/bigemptyfile bs=4M || true
  #     rm -f /bigemptyfile
  - exec_out: echo "sync..." ; sync
  - exec_out: qemu-img convert -c -O qcow2 $(readlink $$container) $$filename.qcow2


- prepare_vagrant_libvirt_pkg:
  - write_out:
    - Vagrantfile
    - |
      # -*- mode: ruby -*-
      # vi: set ft=ruby :
      
      Vagrant.configure("2") do |config|
        # Options for libvirt vagrant provider.
        config.vm.provider :libvirt do |libvirt|
          # A hypervisor name to access. Different drivers can be specified, but
          # this version of provider creates KVM machines only. Some examples of
          # drivers are qemu (KVM/qemu), xen (Xen hypervisor), lxc (Linux Containers),
          # esx (VMware ESX), vmwarews (VMware Workstation) and more. Refer to
          # documentation for available drivers (http://libvirt.org/drivers.html).
          libvirt.driver = "qemu"
          
          # Libvirt storage pool name, where box image and instance snapshots will
          # be stored.
          libvirt.storage_pool_name = "default"
          libvirt.memory = $$memory
          libvirt.nested = true
          libvirt.volume_cache = 'none'
        end
      end
  - write_out:
    - metadata.json
    - |
      {
        "provider" : "libvirt",
        "format" : "qcow2",
        "virtual_size" : $$image_size
      }
  - exec_out: mv $$filename.qcow2 box.img

- create_vagrant_libvirt_pkg:
  - exec_out: echo "Create vagrant package"
  - exec_out: rm -f $$filename.box
  - exec_out: tar cvzf $$filename.box ./metadata.json ./Vagrantfile ./box.img
